### YamlMime:ManagedReference
items:
- uid: Zeebe.Client.Api.Commands.IFinalCommandStep`1
  commentId: T:Zeebe.Client.Api.Commands.IFinalCommandStep`1
  id: IFinalCommandStep`1
  parent: Zeebe.Client.Api.Commands
  children:
  - Zeebe.Client.Api.Commands.IFinalCommandStep`1.Send(System.Nullable{TimeSpan})
  langs:
  - csharp
  - vb
  name: IFinalCommandStep<T>
  nameWithType: IFinalCommandStep<T>
  fullName: Zeebe.Client.Api.Commands.IFinalCommandStep<T>
  type: Interface
  source:
    id: IFinalCommandStep
    path: ''
    startLine: 1538
  assemblies:
  - cs.temp.dll
  namespace: Zeebe.Client.Api.Commands
  summary: "\nThe is a general final command step for the fluent command API, which defines the send method.\n"
  example: []
  syntax:
    content: public interface IFinalCommandStep<T>
    typeParameters:
    - id: T
      description: the type of the command response
    content.vb: Public Interface IFinalCommandStep(Of T)
  nameWithType.vb: IFinalCommandStep(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Zeebe.Client.Api.Commands.IFinalCommandStep(Of T)
  name.vb: IFinalCommandStep(Of T)
- uid: Zeebe.Client.Api.Commands.IFinalCommandStep`1.Send(System.Nullable{TimeSpan})
  commentId: M:Zeebe.Client.Api.Commands.IFinalCommandStep`1.Send(System.Nullable{TimeSpan})
  id: Send(System.Nullable{TimeSpan})
  parent: Zeebe.Client.Api.Commands.IFinalCommandStep`1
  langs:
  - csharp
  - vb
  name: Send(Nullable<TimeSpan>)
  nameWithType: IFinalCommandStep<T>.Send(Nullable<TimeSpan>)
  fullName: Zeebe.Client.Api.Commands.IFinalCommandStep<T>.Send(System.Nullable<TimeSpan>)
  type: Method
  source:
    id: Send
    path: ''
    startLine: 1553
  assemblies:
  - cs.temp.dll
  namespace: Zeebe.Client.Api.Commands
  summary: "\nSends the command to the Zeebe broker. This operation is asynchronous. In case of success, the\ntask returns the event that was generated by the Zeebe broker in response to the command.\n\n<p>Use `await ...send();` to wait until the response is available.</p>\n\n<pre>\nT response = await command.send();\n</pre>\n\n"
  example: []
  syntax:
    content: Task<T> Send(TimeSpan? timeout = default(TimeSpan? ))
    parameters:
    - id: timeout
      type: System.Nullable{TimeSpan}
      description: the time span after request should be timed out
    return:
      type: Task{{T}}
      description: a task tracking state of success/failure of the command.
    content.vb: Function Send(timeout As TimeSpan? = Nothing) As Task(Of T)
  overload: Zeebe.Client.Api.Commands.IFinalCommandStep`1.Send*
  nameWithType.vb: IFinalCommandStep(Of T).Send(Nullable(Of TimeSpan))
  fullName.vb: Zeebe.Client.Api.Commands.IFinalCommandStep(Of T).Send(System.Nullable(Of TimeSpan))
  name.vb: Send(Nullable(Of TimeSpan))
references:
- uid: Zeebe.Client.Api.Commands
  commentId: N:Zeebe.Client.Api.Commands
  name: Zeebe.Client.Api.Commands
  nameWithType: Zeebe.Client.Api.Commands
  fullName: Zeebe.Client.Api.Commands
- uid: Zeebe.Client.Api.Commands.IFinalCommandStep`1.Send*
  commentId: Overload:Zeebe.Client.Api.Commands.IFinalCommandStep`1.Send
  name: Send
  nameWithType: IFinalCommandStep<T>.Send
  fullName: Zeebe.Client.Api.Commands.IFinalCommandStep<T>.Send
  nameWithType.vb: IFinalCommandStep(Of T).Send
  fullName.vb: Zeebe.Client.Api.Commands.IFinalCommandStep(Of T).Send
- uid: System.Nullable{TimeSpan}
  commentId: T:System.Nullable{TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullName.vb: System.Nullable(Of TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{{T}}
  commentId: '!:Task{`0}'
  definition: Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )

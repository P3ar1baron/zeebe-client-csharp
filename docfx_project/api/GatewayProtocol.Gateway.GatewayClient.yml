### YamlMime:ManagedReference
items:
- uid: GatewayProtocol.Gateway.GatewayClient
  commentId: T:GatewayProtocol.Gateway.GatewayClient
  id: Gateway.GatewayClient
  parent: GatewayProtocol
  children:
  - GatewayProtocol.Gateway.GatewayClient.#ctor
  - GatewayProtocol.Gateway.GatewayClient.#ctor(ClientBaseConfiguration)
  - GatewayProtocol.Gateway.GatewayClient.#ctor(grpc.CallInvoker)
  - GatewayProtocol.Gateway.GatewayClient.#ctor(grpc.ChannelBase)
  - GatewayProtocol.Gateway.GatewayClient.ActivateJobs(GatewayProtocol.ActivateJobsRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.ActivateJobs(GatewayProtocol.ActivateJobsRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstance(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstance(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstanceAsync(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstanceAsync(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.CompleteJob(GatewayProtocol.CompleteJobRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.CompleteJob(GatewayProtocol.CompleteJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.CompleteJobAsync(GatewayProtocol.CompleteJobRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.CompleteJobAsync(GatewayProtocol.CompleteJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstance(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstance(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceAsync(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceAsync(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResult(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResult(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.DeployWorkflow(GatewayProtocol.DeployWorkflowRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.DeployWorkflow(GatewayProtocol.DeployWorkflowRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.DeployWorkflowAsync(GatewayProtocol.DeployWorkflowRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.DeployWorkflowAsync(GatewayProtocol.DeployWorkflowRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.FailJob(GatewayProtocol.FailJobRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.FailJob(GatewayProtocol.FailJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.FailJobAsync(GatewayProtocol.FailJobRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.FailJobAsync(GatewayProtocol.FailJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.NewInstance(ClientBaseConfiguration)
  - GatewayProtocol.Gateway.GatewayClient.PublishMessage(GatewayProtocol.PublishMessageRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.PublishMessage(GatewayProtocol.PublishMessageRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.PublishMessageAsync(GatewayProtocol.PublishMessageRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.PublishMessageAsync(GatewayProtocol.PublishMessageRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.ResolveIncident(GatewayProtocol.ResolveIncidentRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.ResolveIncident(GatewayProtocol.ResolveIncidentRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.ResolveIncidentAsync(GatewayProtocol.ResolveIncidentRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.ResolveIncidentAsync(GatewayProtocol.ResolveIncidentRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.SetVariables(GatewayProtocol.SetVariablesRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.SetVariables(GatewayProtocol.SetVariablesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.SetVariablesAsync(GatewayProtocol.SetVariablesRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.SetVariablesAsync(GatewayProtocol.SetVariablesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.Topology(GatewayProtocol.TopologyRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.Topology(GatewayProtocol.TopologyRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.TopologyAsync(GatewayProtocol.TopologyRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.TopologyAsync(GatewayProtocol.TopologyRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.UpdateJobRetries(GatewayProtocol.UpdateJobRetriesRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.UpdateJobRetries(GatewayProtocol.UpdateJobRetriesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  - GatewayProtocol.Gateway.GatewayClient.UpdateJobRetriesAsync(GatewayProtocol.UpdateJobRetriesRequest,grpc.CallOptions)
  - GatewayProtocol.Gateway.GatewayClient.UpdateJobRetriesAsync(GatewayProtocol.UpdateJobRetriesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: Gateway.GatewayClient
  nameWithType: Gateway.GatewayClient
  fullName: GatewayProtocol.Gateway.GatewayClient
  type: Class
  source:
    id: GatewayClient
    path: ''
    startLine: 8138
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: Client for Gateway
  example: []
  syntax:
    content: 'public class GatewayClient : grpc.ClientBase<Gateway.GatewayClient>'
    content.vb: >-
      Public Class GatewayClient
          Inherits grpc.ClientBase(Of Gateway.GatewayClient)
  inheritance:
  - System.Object
  derivedClasses:
  - GatewayProtocol.ClosedGatewayClient
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GatewayProtocol.Gateway.GatewayClient.#ctor(grpc.ChannelBase)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.#ctor(grpc.ChannelBase)
  id: '#ctor(grpc.ChannelBase)'
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: GatewayClient(grpc.ChannelBase)
  nameWithType: Gateway.GatewayClient.GatewayClient(grpc.ChannelBase)
  fullName: GatewayProtocol.Gateway.GatewayClient.GatewayClient(grpc.ChannelBase)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 8142
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: Creates a new client for Gateway
  example: []
  syntax:
    content: public GatewayClient(grpc.ChannelBase channel)
    parameters:
    - id: channel
      type: grpc.ChannelBase
      description: The channel to use to make remote calls.
    content.vb: Public Sub New(channel As grpc.ChannelBase)
  overload: GatewayProtocol.Gateway.GatewayClient.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GatewayProtocol.Gateway.GatewayClient.#ctor(grpc.CallInvoker)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.#ctor(grpc.CallInvoker)
  id: '#ctor(grpc.CallInvoker)'
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: GatewayClient(grpc.CallInvoker)
  nameWithType: Gateway.GatewayClient.GatewayClient(grpc.CallInvoker)
  fullName: GatewayProtocol.Gateway.GatewayClient.GatewayClient(grpc.CallInvoker)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 8147
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: Creates a new client for Gateway that uses a custom <code>CallInvoker</code>.
  example: []
  syntax:
    content: public GatewayClient(grpc.CallInvoker callInvoker)
    parameters:
    - id: callInvoker
      type: grpc.CallInvoker
      description: The callInvoker to use to make remote calls.
    content.vb: Public Sub New(callInvoker As grpc.CallInvoker)
  overload: GatewayProtocol.Gateway.GatewayClient.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: GatewayProtocol.Gateway.GatewayClient.#ctor
  commentId: M:GatewayProtocol.Gateway.GatewayClient.#ctor
  id: '#ctor'
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: GatewayClient()
  nameWithType: Gateway.GatewayClient.GatewayClient()
  fullName: GatewayProtocol.Gateway.GatewayClient.GatewayClient()
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 8151
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: Protected parameterless constructor to allow creation of test doubles.
  example: []
  syntax:
    content: protected GatewayClient()
    content.vb: Protected Sub New
  overload: GatewayProtocol.Gateway.GatewayClient.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: GatewayProtocol.Gateway.GatewayClient.#ctor(ClientBaseConfiguration)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.#ctor(ClientBaseConfiguration)
  id: '#ctor(ClientBaseConfiguration)'
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: GatewayClient(ClientBaseConfiguration)
  nameWithType: Gateway.GatewayClient.GatewayClient(ClientBaseConfiguration)
  fullName: GatewayProtocol.Gateway.GatewayClient.GatewayClient(ClientBaseConfiguration)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 8156
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: Protected constructor to allow creation of configured clients.
  example: []
  syntax:
    content: protected GatewayClient(ClientBaseConfiguration configuration)
    parameters:
    - id: configuration
      type: ClientBaseConfiguration
      description: The client configuration.
    content.vb: Protected Sub New(configuration As ClientBaseConfiguration)
  overload: GatewayProtocol.Gateway.GatewayClient.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: GatewayProtocol.Gateway.GatewayClient.ActivateJobs(GatewayProtocol.ActivateJobsRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.ActivateJobs(GatewayProtocol.ActivateJobsRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: ActivateJobs(GatewayProtocol.ActivateJobsRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: ActivateJobs(ActivateJobsRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.ActivateJobs(ActivateJobsRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.ActivateJobs(GatewayProtocol.ActivateJobsRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ActivateJobs
    path: ''
    startLine: 8177
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nIterates through all known partitions round-robin and activates up to the requested\nmaximum and streams them back to the client as they are activated.\n\nErrors:\nINVALID_ARGUMENT:\n- type is blank (empty string, null)\n- worker is blank (empty string, null)\n- timeout less than 1\n- maxJobsToActivate is less than 1\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncServerStreamingCall<ActivateJobsResponse> ActivateJobs(ActivateJobsRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.ActivateJobsRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: grpc.AsyncServerStreamingCall{GatewayProtocol.ActivateJobsResponse}
      description: The call object.
    content.vb: Public Overridable Function ActivateJobs(request As ActivateJobsRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As grpc.AsyncServerStreamingCall(Of ActivateJobsResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.ActivateJobs*
  nameWithType.vb: Gateway.GatewayClient.ActivateJobs(ActivateJobsRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.ActivateJobs(GatewayProtocol.ActivateJobsRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: ActivateJobs(ActivateJobsRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.ActivateJobs(GatewayProtocol.ActivateJobsRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.ActivateJobs(GatewayProtocol.ActivateJobsRequest,grpc.CallOptions)
  id: ActivateJobs(GatewayProtocol.ActivateJobsRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: ActivateJobs(ActivateJobsRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.ActivateJobs(ActivateJobsRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.ActivateJobs(GatewayProtocol.ActivateJobsRequest, grpc.CallOptions)
  type: Method
  source:
    id: ActivateJobs
    path: ''
    startLine: 8196
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nIterates through all known partitions round-robin and activates up to the requested\nmaximum and streams them back to the client as they are activated.\n\nErrors:\nINVALID_ARGUMENT:\n- type is blank (empty string, null)\n- worker is blank (empty string, null)\n- timeout less than 1\n- maxJobsToActivate is less than 1\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncServerStreamingCall<ActivateJobsResponse> ActivateJobs(ActivateJobsRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.ActivateJobsRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: grpc.AsyncServerStreamingCall{GatewayProtocol.ActivateJobsResponse}
      description: The call object.
    content.vb: Public Overridable Function ActivateJobs(request As ActivateJobsRequest, options As grpc.CallOptions) As grpc.AsyncServerStreamingCall(Of ActivateJobsResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.ActivateJobs*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstance(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstance(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: CancelWorkflowInstance(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CancelWorkflowInstance(CancelWorkflowInstanceRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.CancelWorkflowInstance(CancelWorkflowInstanceRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstance(GatewayProtocol.CancelWorkflowInstanceRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CancelWorkflowInstance
    path: ''
    startLine: 8213
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nCancels a running workflow instance\n\nErrors:\nNOT_FOUND:\n- no workflow instance exists with the given key\n"
  example: []
  syntax:
    content: public virtual CancelWorkflowInstanceResponse CancelWorkflowInstance(CancelWorkflowInstanceRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.CancelWorkflowInstanceRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: GatewayProtocol.CancelWorkflowInstanceResponse
      description: The response received from the server.
    content.vb: Public Overridable Function CancelWorkflowInstance(request As CancelWorkflowInstanceRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As CancelWorkflowInstanceResponse
  overload: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstance*
  nameWithType.vb: Gateway.GatewayClient.CancelWorkflowInstance(CancelWorkflowInstanceRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstance(GatewayProtocol.CancelWorkflowInstanceRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: CancelWorkflowInstance(CancelWorkflowInstanceRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstance(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstance(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.CallOptions)
  id: CancelWorkflowInstance(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CancelWorkflowInstance(CancelWorkflowInstanceRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.CancelWorkflowInstance(CancelWorkflowInstanceRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstance(GatewayProtocol.CancelWorkflowInstanceRequest, grpc.CallOptions)
  type: Method
  source:
    id: CancelWorkflowInstance
    path: ''
    startLine: 8228
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nCancels a running workflow instance\n\nErrors:\nNOT_FOUND:\n- no workflow instance exists with the given key\n"
  example: []
  syntax:
    content: public virtual CancelWorkflowInstanceResponse CancelWorkflowInstance(CancelWorkflowInstanceRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.CancelWorkflowInstanceRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: GatewayProtocol.CancelWorkflowInstanceResponse
      description: The response received from the server.
    content.vb: Public Overridable Function CancelWorkflowInstance(request As CancelWorkflowInstanceRequest, options As grpc.CallOptions) As CancelWorkflowInstanceResponse
  overload: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstance*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstanceAsync(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstanceAsync(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: CancelWorkflowInstanceAsync(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CancelWorkflowInstanceAsync(CancelWorkflowInstanceRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.CancelWorkflowInstanceAsync(CancelWorkflowInstanceRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstanceAsync(GatewayProtocol.CancelWorkflowInstanceRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CancelWorkflowInstanceAsync
    path: ''
    startLine: 8245
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nCancels a running workflow instance\n\nErrors:\nNOT_FOUND:\n- no workflow instance exists with the given key\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<CancelWorkflowInstanceResponse> CancelWorkflowInstanceAsync(CancelWorkflowInstanceRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.CancelWorkflowInstanceRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.CancelWorkflowInstanceResponse}
      description: The call object.
    content.vb: Public Overridable Function CancelWorkflowInstanceAsync(request As CancelWorkflowInstanceRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As grpc.AsyncUnaryCall(Of CancelWorkflowInstanceResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstanceAsync*
  nameWithType.vb: Gateway.GatewayClient.CancelWorkflowInstanceAsync(CancelWorkflowInstanceRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstanceAsync(GatewayProtocol.CancelWorkflowInstanceRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: CancelWorkflowInstanceAsync(CancelWorkflowInstanceRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstanceAsync(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstanceAsync(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.CallOptions)
  id: CancelWorkflowInstanceAsync(GatewayProtocol.CancelWorkflowInstanceRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CancelWorkflowInstanceAsync(CancelWorkflowInstanceRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.CancelWorkflowInstanceAsync(CancelWorkflowInstanceRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstanceAsync(GatewayProtocol.CancelWorkflowInstanceRequest, grpc.CallOptions)
  type: Method
  source:
    id: CancelWorkflowInstanceAsync
    path: ''
    startLine: 8260
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nCancels a running workflow instance\n\nErrors:\nNOT_FOUND:\n- no workflow instance exists with the given key\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<CancelWorkflowInstanceResponse> CancelWorkflowInstanceAsync(CancelWorkflowInstanceRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.CancelWorkflowInstanceRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.CancelWorkflowInstanceResponse}
      description: The call object.
    content.vb: Public Overridable Function CancelWorkflowInstanceAsync(request As CancelWorkflowInstanceRequest, options As grpc.CallOptions) As grpc.AsyncUnaryCall(Of CancelWorkflowInstanceResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstanceAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.CompleteJob(GatewayProtocol.CompleteJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CompleteJob(GatewayProtocol.CompleteJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: CompleteJob(GatewayProtocol.CompleteJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CompleteJob(CompleteJobRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.CompleteJob(CompleteJobRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.CompleteJob(GatewayProtocol.CompleteJobRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CompleteJob
    path: ''
    startLine: 8282
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nCompletes a job with the given variables, which allows completing the associated service task.\n\nErrors:\nNOT_FOUND:\n- no job exists with the given job key. Note that since jobs are removed once completed,\nit could be that this job did exist at some point.\n\nFAILED_PRECONDITION:\n- the job was marked as failed. In that case, the related incident must be resolved before\nthe job can be activated again and completed.\n"
  example: []
  syntax:
    content: public virtual CompleteJobResponse CompleteJob(CompleteJobRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.CompleteJobRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: GatewayProtocol.CompleteJobResponse
      description: The response received from the server.
    content.vb: Public Overridable Function CompleteJob(request As CompleteJobRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As CompleteJobResponse
  overload: GatewayProtocol.Gateway.GatewayClient.CompleteJob*
  nameWithType.vb: Gateway.GatewayClient.CompleteJob(CompleteJobRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.CompleteJob(GatewayProtocol.CompleteJobRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: CompleteJob(CompleteJobRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.CompleteJob(GatewayProtocol.CompleteJobRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CompleteJob(GatewayProtocol.CompleteJobRequest,grpc.CallOptions)
  id: CompleteJob(GatewayProtocol.CompleteJobRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CompleteJob(CompleteJobRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.CompleteJob(CompleteJobRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.CompleteJob(GatewayProtocol.CompleteJobRequest, grpc.CallOptions)
  type: Method
  source:
    id: CompleteJob
    path: ''
    startLine: 8302
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nCompletes a job with the given variables, which allows completing the associated service task.\n\nErrors:\nNOT_FOUND:\n- no job exists with the given job key. Note that since jobs are removed once completed,\nit could be that this job did exist at some point.\n\nFAILED_PRECONDITION:\n- the job was marked as failed. In that case, the related incident must be resolved before\nthe job can be activated again and completed.\n"
  example: []
  syntax:
    content: public virtual CompleteJobResponse CompleteJob(CompleteJobRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.CompleteJobRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: GatewayProtocol.CompleteJobResponse
      description: The response received from the server.
    content.vb: Public Overridable Function CompleteJob(request As CompleteJobRequest, options As grpc.CallOptions) As CompleteJobResponse
  overload: GatewayProtocol.Gateway.GatewayClient.CompleteJob*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.CompleteJobAsync(GatewayProtocol.CompleteJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CompleteJobAsync(GatewayProtocol.CompleteJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: CompleteJobAsync(GatewayProtocol.CompleteJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CompleteJobAsync(CompleteJobRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.CompleteJobAsync(CompleteJobRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.CompleteJobAsync(GatewayProtocol.CompleteJobRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CompleteJobAsync
    path: ''
    startLine: 8324
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nCompletes a job with the given variables, which allows completing the associated service task.\n\nErrors:\nNOT_FOUND:\n- no job exists with the given job key. Note that since jobs are removed once completed,\nit could be that this job did exist at some point.\n\nFAILED_PRECONDITION:\n- the job was marked as failed. In that case, the related incident must be resolved before\nthe job can be activated again and completed.\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<CompleteJobResponse> CompleteJobAsync(CompleteJobRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.CompleteJobRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.CompleteJobResponse}
      description: The call object.
    content.vb: Public Overridable Function CompleteJobAsync(request As CompleteJobRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As grpc.AsyncUnaryCall(Of CompleteJobResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.CompleteJobAsync*
  nameWithType.vb: Gateway.GatewayClient.CompleteJobAsync(CompleteJobRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.CompleteJobAsync(GatewayProtocol.CompleteJobRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: CompleteJobAsync(CompleteJobRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.CompleteJobAsync(GatewayProtocol.CompleteJobRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CompleteJobAsync(GatewayProtocol.CompleteJobRequest,grpc.CallOptions)
  id: CompleteJobAsync(GatewayProtocol.CompleteJobRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CompleteJobAsync(CompleteJobRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.CompleteJobAsync(CompleteJobRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.CompleteJobAsync(GatewayProtocol.CompleteJobRequest, grpc.CallOptions)
  type: Method
  source:
    id: CompleteJobAsync
    path: ''
    startLine: 8344
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nCompletes a job with the given variables, which allows completing the associated service task.\n\nErrors:\nNOT_FOUND:\n- no job exists with the given job key. Note that since jobs are removed once completed,\nit could be that this job did exist at some point.\n\nFAILED_PRECONDITION:\n- the job was marked as failed. In that case, the related incident must be resolved before\nthe job can be activated again and completed.\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<CompleteJobResponse> CompleteJobAsync(CompleteJobRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.CompleteJobRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.CompleteJobResponse}
      description: The call object.
    content.vb: Public Overridable Function CompleteJobAsync(request As CompleteJobRequest, options As grpc.CallOptions) As grpc.AsyncUnaryCall(Of CompleteJobResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.CompleteJobAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstance(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstance(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: CreateWorkflowInstance(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CreateWorkflowInstance(CreateWorkflowInstanceRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.CreateWorkflowInstance(CreateWorkflowInstanceRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstance(GatewayProtocol.CreateWorkflowInstanceRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateWorkflowInstance
    path: ''
    startLine: 8375
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nCreates and starts an instance of the specified workflow. The workflow definition to use to\ncreate the instance can be specified either using its unique key (as returned by\nDeployWorkflow), or using the BPMN process ID and a version. Pass -1 as the version to use the\nlatest deployed version. Note that only workflows with none start events can be started through\nthis command.\n\nErrors:\nNOT_FOUND:\n- no workflow with the given key exists (if workflowKey was given)\n- no workflow with the given process ID exists (if bpmnProcessId was given but version was -1)\n- no workflow with the given process ID and version exists (if both bpmnProcessId and version were given)\n\nFAILED_PRECONDITION:\n- the workflow definition does not contain a none start event; only workflows with none\nstart event can be started manually.\n\nINVALID_ARGUMENT:\n- the given variables argument is not a valid JSON document; it is expected to be a valid\nJSON document where the root node is an object.\n"
  example: []
  syntax:
    content: public virtual CreateWorkflowInstanceResponse CreateWorkflowInstance(CreateWorkflowInstanceRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.CreateWorkflowInstanceRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: GatewayProtocol.CreateWorkflowInstanceResponse
      description: The response received from the server.
    content.vb: Public Overridable Function CreateWorkflowInstance(request As CreateWorkflowInstanceRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As CreateWorkflowInstanceResponse
  overload: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstance*
  nameWithType.vb: Gateway.GatewayClient.CreateWorkflowInstance(CreateWorkflowInstanceRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstance(GatewayProtocol.CreateWorkflowInstanceRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: CreateWorkflowInstance(CreateWorkflowInstanceRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstance(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstance(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.CallOptions)
  id: CreateWorkflowInstance(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CreateWorkflowInstance(CreateWorkflowInstanceRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.CreateWorkflowInstance(CreateWorkflowInstanceRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstance(GatewayProtocol.CreateWorkflowInstanceRequest, grpc.CallOptions)
  type: Method
  source:
    id: CreateWorkflowInstance
    path: ''
    startLine: 8404
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nCreates and starts an instance of the specified workflow. The workflow definition to use to\ncreate the instance can be specified either using its unique key (as returned by\nDeployWorkflow), or using the BPMN process ID and a version. Pass -1 as the version to use the\nlatest deployed version. Note that only workflows with none start events can be started through\nthis command.\n\nErrors:\nNOT_FOUND:\n- no workflow with the given key exists (if workflowKey was given)\n- no workflow with the given process ID exists (if bpmnProcessId was given but version was -1)\n- no workflow with the given process ID and version exists (if both bpmnProcessId and version were given)\n\nFAILED_PRECONDITION:\n- the workflow definition does not contain a none start event; only workflows with none\nstart event can be started manually.\n\nINVALID_ARGUMENT:\n- the given variables argument is not a valid JSON document; it is expected to be a valid\nJSON document where the root node is an object.\n"
  example: []
  syntax:
    content: public virtual CreateWorkflowInstanceResponse CreateWorkflowInstance(CreateWorkflowInstanceRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.CreateWorkflowInstanceRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: GatewayProtocol.CreateWorkflowInstanceResponse
      description: The response received from the server.
    content.vb: Public Overridable Function CreateWorkflowInstance(request As CreateWorkflowInstanceRequest, options As grpc.CallOptions) As CreateWorkflowInstanceResponse
  overload: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstance*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceAsync(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceAsync(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: CreateWorkflowInstanceAsync(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CreateWorkflowInstanceAsync(CreateWorkflowInstanceRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.CreateWorkflowInstanceAsync(CreateWorkflowInstanceRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceAsync(GatewayProtocol.CreateWorkflowInstanceRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateWorkflowInstanceAsync
    path: ''
    startLine: 8435
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nCreates and starts an instance of the specified workflow. The workflow definition to use to\ncreate the instance can be specified either using its unique key (as returned by\nDeployWorkflow), or using the BPMN process ID and a version. Pass -1 as the version to use the\nlatest deployed version. Note that only workflows with none start events can be started through\nthis command.\n\nErrors:\nNOT_FOUND:\n- no workflow with the given key exists (if workflowKey was given)\n- no workflow with the given process ID exists (if bpmnProcessId was given but version was -1)\n- no workflow with the given process ID and version exists (if both bpmnProcessId and version were given)\n\nFAILED_PRECONDITION:\n- the workflow definition does not contain a none start event; only workflows with none\nstart event can be started manually.\n\nINVALID_ARGUMENT:\n- the given variables argument is not a valid JSON document; it is expected to be a valid\nJSON document where the root node is an object.\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<CreateWorkflowInstanceResponse> CreateWorkflowInstanceAsync(CreateWorkflowInstanceRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.CreateWorkflowInstanceRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.CreateWorkflowInstanceResponse}
      description: The call object.
    content.vb: Public Overridable Function CreateWorkflowInstanceAsync(request As CreateWorkflowInstanceRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As grpc.AsyncUnaryCall(Of CreateWorkflowInstanceResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceAsync*
  nameWithType.vb: Gateway.GatewayClient.CreateWorkflowInstanceAsync(CreateWorkflowInstanceRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceAsync(GatewayProtocol.CreateWorkflowInstanceRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: CreateWorkflowInstanceAsync(CreateWorkflowInstanceRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceAsync(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceAsync(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.CallOptions)
  id: CreateWorkflowInstanceAsync(GatewayProtocol.CreateWorkflowInstanceRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CreateWorkflowInstanceAsync(CreateWorkflowInstanceRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.CreateWorkflowInstanceAsync(CreateWorkflowInstanceRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceAsync(GatewayProtocol.CreateWorkflowInstanceRequest, grpc.CallOptions)
  type: Method
  source:
    id: CreateWorkflowInstanceAsync
    path: ''
    startLine: 8464
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nCreates and starts an instance of the specified workflow. The workflow definition to use to\ncreate the instance can be specified either using its unique key (as returned by\nDeployWorkflow), or using the BPMN process ID and a version. Pass -1 as the version to use the\nlatest deployed version. Note that only workflows with none start events can be started through\nthis command.\n\nErrors:\nNOT_FOUND:\n- no workflow with the given key exists (if workflowKey was given)\n- no workflow with the given process ID exists (if bpmnProcessId was given but version was -1)\n- no workflow with the given process ID and version exists (if both bpmnProcessId and version were given)\n\nFAILED_PRECONDITION:\n- the workflow definition does not contain a none start event; only workflows with none\nstart event can be started manually.\n\nINVALID_ARGUMENT:\n- the given variables argument is not a valid JSON document; it is expected to be a valid\nJSON document where the root node is an object.\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<CreateWorkflowInstanceResponse> CreateWorkflowInstanceAsync(CreateWorkflowInstanceRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.CreateWorkflowInstanceRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.CreateWorkflowInstanceResponse}
      description: The call object.
    content.vb: Public Overridable Function CreateWorkflowInstanceAsync(request As CreateWorkflowInstanceRequest, options As grpc.CallOptions) As grpc.AsyncUnaryCall(Of CreateWorkflowInstanceResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResult(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResult(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: CreateWorkflowInstanceWithResult(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CreateWorkflowInstanceWithResult(CreateWorkflowInstanceWithResultRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.CreateWorkflowInstanceWithResult(CreateWorkflowInstanceWithResultRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResult(GatewayProtocol.CreateWorkflowInstanceWithResultRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateWorkflowInstanceWithResult
    path: ''
    startLine: 8477
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nBehaves similarly to `rpc CreateWorkflowInstance`, except that a successful response is received when the workflow completes successfully.\n"
  example: []
  syntax:
    content: public virtual CreateWorkflowInstanceWithResultResponse CreateWorkflowInstanceWithResult(CreateWorkflowInstanceWithResultRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.CreateWorkflowInstanceWithResultRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: GatewayProtocol.CreateWorkflowInstanceWithResultResponse
      description: The response received from the server.
    content.vb: Public Overridable Function CreateWorkflowInstanceWithResult(request As CreateWorkflowInstanceWithResultRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As CreateWorkflowInstanceWithResultResponse
  overload: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResult*
  nameWithType.vb: Gateway.GatewayClient.CreateWorkflowInstanceWithResult(CreateWorkflowInstanceWithResultRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResult(GatewayProtocol.CreateWorkflowInstanceWithResultRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: CreateWorkflowInstanceWithResult(CreateWorkflowInstanceWithResultRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResult(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResult(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.CallOptions)
  id: CreateWorkflowInstanceWithResult(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CreateWorkflowInstanceWithResult(CreateWorkflowInstanceWithResultRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.CreateWorkflowInstanceWithResult(CreateWorkflowInstanceWithResultRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResult(GatewayProtocol.CreateWorkflowInstanceWithResultRequest, grpc.CallOptions)
  type: Method
  source:
    id: CreateWorkflowInstanceWithResult
    path: ''
    startLine: 8488
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nBehaves similarly to `rpc CreateWorkflowInstance`, except that a successful response is received when the workflow completes successfully.\n"
  example: []
  syntax:
    content: public virtual CreateWorkflowInstanceWithResultResponse CreateWorkflowInstanceWithResult(CreateWorkflowInstanceWithResultRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.CreateWorkflowInstanceWithResultRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: GatewayProtocol.CreateWorkflowInstanceWithResultResponse
      description: The response received from the server.
    content.vb: Public Overridable Function CreateWorkflowInstanceWithResult(request As CreateWorkflowInstanceWithResultRequest, options As grpc.CallOptions) As CreateWorkflowInstanceWithResultResponse
  overload: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResult*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: CreateWorkflowInstanceWithResultAsync(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CreateWorkflowInstanceWithResultAsync(CreateWorkflowInstanceWithResultRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync(CreateWorkflowInstanceWithResultRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync(GatewayProtocol.CreateWorkflowInstanceWithResultRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: CreateWorkflowInstanceWithResultAsync
    path: ''
    startLine: 8501
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nBehaves similarly to `rpc CreateWorkflowInstance`, except that a successful response is received when the workflow completes successfully.\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<CreateWorkflowInstanceWithResultResponse> CreateWorkflowInstanceWithResultAsync(CreateWorkflowInstanceWithResultRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.CreateWorkflowInstanceWithResultRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.CreateWorkflowInstanceWithResultResponse}
      description: The call object.
    content.vb: Public Overridable Function CreateWorkflowInstanceWithResultAsync(request As CreateWorkflowInstanceWithResultRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As grpc.AsyncUnaryCall(Of CreateWorkflowInstanceWithResultResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync*
  nameWithType.vb: Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync(CreateWorkflowInstanceWithResultRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync(GatewayProtocol.CreateWorkflowInstanceWithResultRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: CreateWorkflowInstanceWithResultAsync(CreateWorkflowInstanceWithResultRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.CallOptions)
  id: CreateWorkflowInstanceWithResultAsync(GatewayProtocol.CreateWorkflowInstanceWithResultRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: CreateWorkflowInstanceWithResultAsync(CreateWorkflowInstanceWithResultRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync(CreateWorkflowInstanceWithResultRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync(GatewayProtocol.CreateWorkflowInstanceWithResultRequest, grpc.CallOptions)
  type: Method
  source:
    id: CreateWorkflowInstanceWithResultAsync
    path: ''
    startLine: 8512
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nBehaves similarly to `rpc CreateWorkflowInstance`, except that a successful response is received when the workflow completes successfully.\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<CreateWorkflowInstanceWithResultResponse> CreateWorkflowInstanceWithResultAsync(CreateWorkflowInstanceWithResultRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.CreateWorkflowInstanceWithResultRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.CreateWorkflowInstanceWithResultResponse}
      description: The call object.
    content.vb: Public Overridable Function CreateWorkflowInstanceWithResultAsync(request As CreateWorkflowInstanceWithResultRequest, options As grpc.CallOptions) As grpc.AsyncUnaryCall(Of CreateWorkflowInstanceWithResultResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.DeployWorkflow(GatewayProtocol.DeployWorkflowRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.DeployWorkflow(GatewayProtocol.DeployWorkflowRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: DeployWorkflow(GatewayProtocol.DeployWorkflowRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: DeployWorkflow(DeployWorkflowRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.DeployWorkflow(DeployWorkflowRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.DeployWorkflow(GatewayProtocol.DeployWorkflowRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: DeployWorkflow
    path: ''
    startLine: 8534
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nDeploys one or more workflows to Zeebe. Note that this is an atomic call,\ni.e. either all workflows are deployed, or none of them are.\n\nErrors:\nINVALID_ARGUMENT:\n- no resources given.\n- if at least one resource is invalid. A resource is considered invalid if:\n- it is not a BPMN or YAML file (currently detected through the file extension)\n- the resource data is not deserializable (e.g. detected as BPMN, but it&apos;s broken XML)\n- the workflow is invalid (e.g. an event-based gateway has an outgoing sequence flow to a task)\n"
  example: []
  syntax:
    content: public virtual DeployWorkflowResponse DeployWorkflow(DeployWorkflowRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.DeployWorkflowRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: GatewayProtocol.DeployWorkflowResponse
      description: The response received from the server.
    content.vb: Public Overridable Function DeployWorkflow(request As DeployWorkflowRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As DeployWorkflowResponse
  overload: GatewayProtocol.Gateway.GatewayClient.DeployWorkflow*
  nameWithType.vb: Gateway.GatewayClient.DeployWorkflow(DeployWorkflowRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.DeployWorkflow(GatewayProtocol.DeployWorkflowRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: DeployWorkflow(DeployWorkflowRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.DeployWorkflow(GatewayProtocol.DeployWorkflowRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.DeployWorkflow(GatewayProtocol.DeployWorkflowRequest,grpc.CallOptions)
  id: DeployWorkflow(GatewayProtocol.DeployWorkflowRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: DeployWorkflow(DeployWorkflowRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.DeployWorkflow(DeployWorkflowRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.DeployWorkflow(GatewayProtocol.DeployWorkflowRequest, grpc.CallOptions)
  type: Method
  source:
    id: DeployWorkflow
    path: ''
    startLine: 8554
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nDeploys one or more workflows to Zeebe. Note that this is an atomic call,\ni.e. either all workflows are deployed, or none of them are.\n\nErrors:\nINVALID_ARGUMENT:\n- no resources given.\n- if at least one resource is invalid. A resource is considered invalid if:\n- it is not a BPMN or YAML file (currently detected through the file extension)\n- the resource data is not deserializable (e.g. detected as BPMN, but it&apos;s broken XML)\n- the workflow is invalid (e.g. an event-based gateway has an outgoing sequence flow to a task)\n"
  example: []
  syntax:
    content: public virtual DeployWorkflowResponse DeployWorkflow(DeployWorkflowRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.DeployWorkflowRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: GatewayProtocol.DeployWorkflowResponse
      description: The response received from the server.
    content.vb: Public Overridable Function DeployWorkflow(request As DeployWorkflowRequest, options As grpc.CallOptions) As DeployWorkflowResponse
  overload: GatewayProtocol.Gateway.GatewayClient.DeployWorkflow*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.DeployWorkflowAsync(GatewayProtocol.DeployWorkflowRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.DeployWorkflowAsync(GatewayProtocol.DeployWorkflowRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: DeployWorkflowAsync(GatewayProtocol.DeployWorkflowRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: DeployWorkflowAsync(DeployWorkflowRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.DeployWorkflowAsync(DeployWorkflowRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.DeployWorkflowAsync(GatewayProtocol.DeployWorkflowRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: DeployWorkflowAsync
    path: ''
    startLine: 8576
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nDeploys one or more workflows to Zeebe. Note that this is an atomic call,\ni.e. either all workflows are deployed, or none of them are.\n\nErrors:\nINVALID_ARGUMENT:\n- no resources given.\n- if at least one resource is invalid. A resource is considered invalid if:\n- it is not a BPMN or YAML file (currently detected through the file extension)\n- the resource data is not deserializable (e.g. detected as BPMN, but it&apos;s broken XML)\n- the workflow is invalid (e.g. an event-based gateway has an outgoing sequence flow to a task)\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<DeployWorkflowResponse> DeployWorkflowAsync(DeployWorkflowRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.DeployWorkflowRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.DeployWorkflowResponse}
      description: The call object.
    content.vb: Public Overridable Function DeployWorkflowAsync(request As DeployWorkflowRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As grpc.AsyncUnaryCall(Of DeployWorkflowResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.DeployWorkflowAsync*
  nameWithType.vb: Gateway.GatewayClient.DeployWorkflowAsync(DeployWorkflowRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.DeployWorkflowAsync(GatewayProtocol.DeployWorkflowRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: DeployWorkflowAsync(DeployWorkflowRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.DeployWorkflowAsync(GatewayProtocol.DeployWorkflowRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.DeployWorkflowAsync(GatewayProtocol.DeployWorkflowRequest,grpc.CallOptions)
  id: DeployWorkflowAsync(GatewayProtocol.DeployWorkflowRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: DeployWorkflowAsync(DeployWorkflowRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.DeployWorkflowAsync(DeployWorkflowRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.DeployWorkflowAsync(GatewayProtocol.DeployWorkflowRequest, grpc.CallOptions)
  type: Method
  source:
    id: DeployWorkflowAsync
    path: ''
    startLine: 8596
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nDeploys one or more workflows to Zeebe. Note that this is an atomic call,\ni.e. either all workflows are deployed, or none of them are.\n\nErrors:\nINVALID_ARGUMENT:\n- no resources given.\n- if at least one resource is invalid. A resource is considered invalid if:\n- it is not a BPMN or YAML file (currently detected through the file extension)\n- the resource data is not deserializable (e.g. detected as BPMN, but it&apos;s broken XML)\n- the workflow is invalid (e.g. an event-based gateway has an outgoing sequence flow to a task)\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<DeployWorkflowResponse> DeployWorkflowAsync(DeployWorkflowRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.DeployWorkflowRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.DeployWorkflowResponse}
      description: The call object.
    content.vb: Public Overridable Function DeployWorkflowAsync(request As DeployWorkflowRequest, options As grpc.CallOptions) As grpc.AsyncUnaryCall(Of DeployWorkflowResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.DeployWorkflowAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.FailJob(GatewayProtocol.FailJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.FailJob(GatewayProtocol.FailJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: FailJob(GatewayProtocol.FailJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: FailJob(FailJobRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.FailJob(FailJobRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.FailJob(GatewayProtocol.FailJobRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: FailJob
    path: ''
    startLine: 8620
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nMarks the job as failed; if the retries argument is positive, then the job will be immediately\nactivatable again, and a worker could try again to process it. If it is zero or negative however,\nan incident will be raised, tagged with the given errorMessage, and the job will not be\nactivatable until the incident is resolved.\n\nErrors:\nNOT_FOUND:\n- no job was found with the given key\n\nFAILED_PRECONDITION:\n- the job was not activated\n- the job is already in a failed state, i.e. ran out of retries\n"
  example: []
  syntax:
    content: public virtual FailJobResponse FailJob(FailJobRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.FailJobRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: GatewayProtocol.FailJobResponse
      description: The response received from the server.
    content.vb: Public Overridable Function FailJob(request As FailJobRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As FailJobResponse
  overload: GatewayProtocol.Gateway.GatewayClient.FailJob*
  nameWithType.vb: Gateway.GatewayClient.FailJob(FailJobRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.FailJob(GatewayProtocol.FailJobRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: FailJob(FailJobRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.FailJob(GatewayProtocol.FailJobRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.FailJob(GatewayProtocol.FailJobRequest,grpc.CallOptions)
  id: FailJob(GatewayProtocol.FailJobRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: FailJob(FailJobRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.FailJob(FailJobRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.FailJob(GatewayProtocol.FailJobRequest, grpc.CallOptions)
  type: Method
  source:
    id: FailJob
    path: ''
    startLine: 8642
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nMarks the job as failed; if the retries argument is positive, then the job will be immediately\nactivatable again, and a worker could try again to process it. If it is zero or negative however,\nan incident will be raised, tagged with the given errorMessage, and the job will not be\nactivatable until the incident is resolved.\n\nErrors:\nNOT_FOUND:\n- no job was found with the given key\n\nFAILED_PRECONDITION:\n- the job was not activated\n- the job is already in a failed state, i.e. ran out of retries\n"
  example: []
  syntax:
    content: public virtual FailJobResponse FailJob(FailJobRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.FailJobRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: GatewayProtocol.FailJobResponse
      description: The response received from the server.
    content.vb: Public Overridable Function FailJob(request As FailJobRequest, options As grpc.CallOptions) As FailJobResponse
  overload: GatewayProtocol.Gateway.GatewayClient.FailJob*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.FailJobAsync(GatewayProtocol.FailJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.FailJobAsync(GatewayProtocol.FailJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: FailJobAsync(GatewayProtocol.FailJobRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: FailJobAsync(FailJobRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.FailJobAsync(FailJobRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.FailJobAsync(GatewayProtocol.FailJobRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: FailJobAsync
    path: ''
    startLine: 8666
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nMarks the job as failed; if the retries argument is positive, then the job will be immediately\nactivatable again, and a worker could try again to process it. If it is zero or negative however,\nan incident will be raised, tagged with the given errorMessage, and the job will not be\nactivatable until the incident is resolved.\n\nErrors:\nNOT_FOUND:\n- no job was found with the given key\n\nFAILED_PRECONDITION:\n- the job was not activated\n- the job is already in a failed state, i.e. ran out of retries\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<FailJobResponse> FailJobAsync(FailJobRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.FailJobRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.FailJobResponse}
      description: The call object.
    content.vb: Public Overridable Function FailJobAsync(request As FailJobRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As grpc.AsyncUnaryCall(Of FailJobResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.FailJobAsync*
  nameWithType.vb: Gateway.GatewayClient.FailJobAsync(FailJobRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.FailJobAsync(GatewayProtocol.FailJobRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: FailJobAsync(FailJobRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.FailJobAsync(GatewayProtocol.FailJobRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.FailJobAsync(GatewayProtocol.FailJobRequest,grpc.CallOptions)
  id: FailJobAsync(GatewayProtocol.FailJobRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: FailJobAsync(FailJobRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.FailJobAsync(FailJobRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.FailJobAsync(GatewayProtocol.FailJobRequest, grpc.CallOptions)
  type: Method
  source:
    id: FailJobAsync
    path: ''
    startLine: 8688
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nMarks the job as failed; if the retries argument is positive, then the job will be immediately\nactivatable again, and a worker could try again to process it. If it is zero or negative however,\nan incident will be raised, tagged with the given errorMessage, and the job will not be\nactivatable until the incident is resolved.\n\nErrors:\nNOT_FOUND:\n- no job was found with the given key\n\nFAILED_PRECONDITION:\n- the job was not activated\n- the job is already in a failed state, i.e. ran out of retries\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<FailJobResponse> FailJobAsync(FailJobRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.FailJobRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.FailJobResponse}
      description: The call object.
    content.vb: Public Overridable Function FailJobAsync(request As FailJobRequest, options As grpc.CallOptions) As grpc.AsyncUnaryCall(Of FailJobResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.FailJobAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.PublishMessage(GatewayProtocol.PublishMessageRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.PublishMessage(GatewayProtocol.PublishMessageRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: PublishMessage(GatewayProtocol.PublishMessageRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: PublishMessage(PublishMessageRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.PublishMessage(PublishMessageRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.PublishMessage(GatewayProtocol.PublishMessageRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: PublishMessage
    path: ''
    startLine: 8706
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nPublishes a single message. Messages are published to specific partitions computed from their\ncorrelation keys.\n\nErrors:\nALREADY_EXISTS:\n- a message with the same ID was previously published (and is still alive)\n"
  example: []
  syntax:
    content: public virtual PublishMessageResponse PublishMessage(PublishMessageRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.PublishMessageRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: GatewayProtocol.PublishMessageResponse
      description: The response received from the server.
    content.vb: Public Overridable Function PublishMessage(request As PublishMessageRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As PublishMessageResponse
  overload: GatewayProtocol.Gateway.GatewayClient.PublishMessage*
  nameWithType.vb: Gateway.GatewayClient.PublishMessage(PublishMessageRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.PublishMessage(GatewayProtocol.PublishMessageRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: PublishMessage(PublishMessageRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.PublishMessage(GatewayProtocol.PublishMessageRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.PublishMessage(GatewayProtocol.PublishMessageRequest,grpc.CallOptions)
  id: PublishMessage(GatewayProtocol.PublishMessageRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: PublishMessage(PublishMessageRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.PublishMessage(PublishMessageRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.PublishMessage(GatewayProtocol.PublishMessageRequest, grpc.CallOptions)
  type: Method
  source:
    id: PublishMessage
    path: ''
    startLine: 8722
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nPublishes a single message. Messages are published to specific partitions computed from their\ncorrelation keys.\n\nErrors:\nALREADY_EXISTS:\n- a message with the same ID was previously published (and is still alive)\n"
  example: []
  syntax:
    content: public virtual PublishMessageResponse PublishMessage(PublishMessageRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.PublishMessageRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: GatewayProtocol.PublishMessageResponse
      description: The response received from the server.
    content.vb: Public Overridable Function PublishMessage(request As PublishMessageRequest, options As grpc.CallOptions) As PublishMessageResponse
  overload: GatewayProtocol.Gateway.GatewayClient.PublishMessage*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.PublishMessageAsync(GatewayProtocol.PublishMessageRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.PublishMessageAsync(GatewayProtocol.PublishMessageRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: PublishMessageAsync(GatewayProtocol.PublishMessageRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: PublishMessageAsync(PublishMessageRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.PublishMessageAsync(PublishMessageRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.PublishMessageAsync(GatewayProtocol.PublishMessageRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: PublishMessageAsync
    path: ''
    startLine: 8740
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nPublishes a single message. Messages are published to specific partitions computed from their\ncorrelation keys.\n\nErrors:\nALREADY_EXISTS:\n- a message with the same ID was previously published (and is still alive)\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<PublishMessageResponse> PublishMessageAsync(PublishMessageRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.PublishMessageRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.PublishMessageResponse}
      description: The call object.
    content.vb: Public Overridable Function PublishMessageAsync(request As PublishMessageRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As grpc.AsyncUnaryCall(Of PublishMessageResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.PublishMessageAsync*
  nameWithType.vb: Gateway.GatewayClient.PublishMessageAsync(PublishMessageRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.PublishMessageAsync(GatewayProtocol.PublishMessageRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: PublishMessageAsync(PublishMessageRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.PublishMessageAsync(GatewayProtocol.PublishMessageRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.PublishMessageAsync(GatewayProtocol.PublishMessageRequest,grpc.CallOptions)
  id: PublishMessageAsync(GatewayProtocol.PublishMessageRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: PublishMessageAsync(PublishMessageRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.PublishMessageAsync(PublishMessageRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.PublishMessageAsync(GatewayProtocol.PublishMessageRequest, grpc.CallOptions)
  type: Method
  source:
    id: PublishMessageAsync
    path: ''
    startLine: 8756
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nPublishes a single message. Messages are published to specific partitions computed from their\ncorrelation keys.\n\nErrors:\nALREADY_EXISTS:\n- a message with the same ID was previously published (and is still alive)\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<PublishMessageResponse> PublishMessageAsync(PublishMessageRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.PublishMessageRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.PublishMessageResponse}
      description: The call object.
    content.vb: Public Overridable Function PublishMessageAsync(request As PublishMessageRequest, options As grpc.CallOptions) As grpc.AsyncUnaryCall(Of PublishMessageResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.PublishMessageAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.ResolveIncident(GatewayProtocol.ResolveIncidentRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.ResolveIncident(GatewayProtocol.ResolveIncidentRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: ResolveIncident(GatewayProtocol.ResolveIncidentRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: ResolveIncident(ResolveIncidentRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.ResolveIncident(ResolveIncidentRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.ResolveIncident(GatewayProtocol.ResolveIncidentRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ResolveIncident
    path: ''
    startLine: 8775
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nResolves a given incident. This simply marks the incident as resolved; most likely a call to\nUpdateJobRetries or SetVariables will be necessary to actually resolve the\nproblem, following by this call.\n\nErrors:\nNOT_FOUND:\n- no incident with the given key exists\n"
  example: []
  syntax:
    content: public virtual ResolveIncidentResponse ResolveIncident(ResolveIncidentRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.ResolveIncidentRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: GatewayProtocol.ResolveIncidentResponse
      description: The response received from the server.
    content.vb: Public Overridable Function ResolveIncident(request As ResolveIncidentRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As ResolveIncidentResponse
  overload: GatewayProtocol.Gateway.GatewayClient.ResolveIncident*
  nameWithType.vb: Gateway.GatewayClient.ResolveIncident(ResolveIncidentRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.ResolveIncident(GatewayProtocol.ResolveIncidentRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: ResolveIncident(ResolveIncidentRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.ResolveIncident(GatewayProtocol.ResolveIncidentRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.ResolveIncident(GatewayProtocol.ResolveIncidentRequest,grpc.CallOptions)
  id: ResolveIncident(GatewayProtocol.ResolveIncidentRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: ResolveIncident(ResolveIncidentRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.ResolveIncident(ResolveIncidentRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.ResolveIncident(GatewayProtocol.ResolveIncidentRequest, grpc.CallOptions)
  type: Method
  source:
    id: ResolveIncident
    path: ''
    startLine: 8792
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nResolves a given incident. This simply marks the incident as resolved; most likely a call to\nUpdateJobRetries or SetVariables will be necessary to actually resolve the\nproblem, following by this call.\n\nErrors:\nNOT_FOUND:\n- no incident with the given key exists\n"
  example: []
  syntax:
    content: public virtual ResolveIncidentResponse ResolveIncident(ResolveIncidentRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.ResolveIncidentRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: GatewayProtocol.ResolveIncidentResponse
      description: The response received from the server.
    content.vb: Public Overridable Function ResolveIncident(request As ResolveIncidentRequest, options As grpc.CallOptions) As ResolveIncidentResponse
  overload: GatewayProtocol.Gateway.GatewayClient.ResolveIncident*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.ResolveIncidentAsync(GatewayProtocol.ResolveIncidentRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.ResolveIncidentAsync(GatewayProtocol.ResolveIncidentRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: ResolveIncidentAsync(GatewayProtocol.ResolveIncidentRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: ResolveIncidentAsync(ResolveIncidentRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.ResolveIncidentAsync(ResolveIncidentRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.ResolveIncidentAsync(GatewayProtocol.ResolveIncidentRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ResolveIncidentAsync
    path: ''
    startLine: 8811
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nResolves a given incident. This simply marks the incident as resolved; most likely a call to\nUpdateJobRetries or SetVariables will be necessary to actually resolve the\nproblem, following by this call.\n\nErrors:\nNOT_FOUND:\n- no incident with the given key exists\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<ResolveIncidentResponse> ResolveIncidentAsync(ResolveIncidentRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.ResolveIncidentRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.ResolveIncidentResponse}
      description: The call object.
    content.vb: Public Overridable Function ResolveIncidentAsync(request As ResolveIncidentRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As grpc.AsyncUnaryCall(Of ResolveIncidentResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.ResolveIncidentAsync*
  nameWithType.vb: Gateway.GatewayClient.ResolveIncidentAsync(ResolveIncidentRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.ResolveIncidentAsync(GatewayProtocol.ResolveIncidentRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: ResolveIncidentAsync(ResolveIncidentRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.ResolveIncidentAsync(GatewayProtocol.ResolveIncidentRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.ResolveIncidentAsync(GatewayProtocol.ResolveIncidentRequest,grpc.CallOptions)
  id: ResolveIncidentAsync(GatewayProtocol.ResolveIncidentRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: ResolveIncidentAsync(ResolveIncidentRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.ResolveIncidentAsync(ResolveIncidentRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.ResolveIncidentAsync(GatewayProtocol.ResolveIncidentRequest, grpc.CallOptions)
  type: Method
  source:
    id: ResolveIncidentAsync
    path: ''
    startLine: 8828
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nResolves a given incident. This simply marks the incident as resolved; most likely a call to\nUpdateJobRetries or SetVariables will be necessary to actually resolve the\nproblem, following by this call.\n\nErrors:\nNOT_FOUND:\n- no incident with the given key exists\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<ResolveIncidentResponse> ResolveIncidentAsync(ResolveIncidentRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.ResolveIncidentRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.ResolveIncidentResponse}
      description: The call object.
    content.vb: Public Overridable Function ResolveIncidentAsync(request As ResolveIncidentRequest, options As grpc.CallOptions) As grpc.AsyncUnaryCall(Of ResolveIncidentResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.ResolveIncidentAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.SetVariables(GatewayProtocol.SetVariablesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.SetVariables(GatewayProtocol.SetVariablesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: SetVariables(GatewayProtocol.SetVariablesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: SetVariables(SetVariablesRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.SetVariables(SetVariablesRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.SetVariables(GatewayProtocol.SetVariablesRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: SetVariables
    path: ''
    startLine: 8849
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nUpdates all the variables of a particular scope (e.g. workflow instance, flow element instance)\nfrom the given JSON document.\n\nErrors:\nNOT_FOUND:\n- no element with the given elementInstanceKey exists\nINVALID_ARGUMENT:\n- the given variables document is not a valid JSON document; valid documents are expected to\nbe JSON documents where the root node is an object.\n"
  example: []
  syntax:
    content: public virtual SetVariablesResponse SetVariables(SetVariablesRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.SetVariablesRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: GatewayProtocol.SetVariablesResponse
      description: The response received from the server.
    content.vb: Public Overridable Function SetVariables(request As SetVariablesRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As SetVariablesResponse
  overload: GatewayProtocol.Gateway.GatewayClient.SetVariables*
  nameWithType.vb: Gateway.GatewayClient.SetVariables(SetVariablesRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.SetVariables(GatewayProtocol.SetVariablesRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: SetVariables(SetVariablesRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.SetVariables(GatewayProtocol.SetVariablesRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.SetVariables(GatewayProtocol.SetVariablesRequest,grpc.CallOptions)
  id: SetVariables(GatewayProtocol.SetVariablesRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: SetVariables(SetVariablesRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.SetVariables(SetVariablesRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.SetVariables(GatewayProtocol.SetVariablesRequest, grpc.CallOptions)
  type: Method
  source:
    id: SetVariables
    path: ''
    startLine: 8868
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nUpdates all the variables of a particular scope (e.g. workflow instance, flow element instance)\nfrom the given JSON document.\n\nErrors:\nNOT_FOUND:\n- no element with the given elementInstanceKey exists\nINVALID_ARGUMENT:\n- the given variables document is not a valid JSON document; valid documents are expected to\nbe JSON documents where the root node is an object.\n"
  example: []
  syntax:
    content: public virtual SetVariablesResponse SetVariables(SetVariablesRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.SetVariablesRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: GatewayProtocol.SetVariablesResponse
      description: The response received from the server.
    content.vb: Public Overridable Function SetVariables(request As SetVariablesRequest, options As grpc.CallOptions) As SetVariablesResponse
  overload: GatewayProtocol.Gateway.GatewayClient.SetVariables*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.SetVariablesAsync(GatewayProtocol.SetVariablesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.SetVariablesAsync(GatewayProtocol.SetVariablesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: SetVariablesAsync(GatewayProtocol.SetVariablesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: SetVariablesAsync(SetVariablesRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.SetVariablesAsync(SetVariablesRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.SetVariablesAsync(GatewayProtocol.SetVariablesRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: SetVariablesAsync
    path: ''
    startLine: 8889
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nUpdates all the variables of a particular scope (e.g. workflow instance, flow element instance)\nfrom the given JSON document.\n\nErrors:\nNOT_FOUND:\n- no element with the given elementInstanceKey exists\nINVALID_ARGUMENT:\n- the given variables document is not a valid JSON document; valid documents are expected to\nbe JSON documents where the root node is an object.\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<SetVariablesResponse> SetVariablesAsync(SetVariablesRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.SetVariablesRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.SetVariablesResponse}
      description: The call object.
    content.vb: Public Overridable Function SetVariablesAsync(request As SetVariablesRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As grpc.AsyncUnaryCall(Of SetVariablesResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.SetVariablesAsync*
  nameWithType.vb: Gateway.GatewayClient.SetVariablesAsync(SetVariablesRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.SetVariablesAsync(GatewayProtocol.SetVariablesRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: SetVariablesAsync(SetVariablesRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.SetVariablesAsync(GatewayProtocol.SetVariablesRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.SetVariablesAsync(GatewayProtocol.SetVariablesRequest,grpc.CallOptions)
  id: SetVariablesAsync(GatewayProtocol.SetVariablesRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: SetVariablesAsync(SetVariablesRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.SetVariablesAsync(SetVariablesRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.SetVariablesAsync(GatewayProtocol.SetVariablesRequest, grpc.CallOptions)
  type: Method
  source:
    id: SetVariablesAsync
    path: ''
    startLine: 8908
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nUpdates all the variables of a particular scope (e.g. workflow instance, flow element instance)\nfrom the given JSON document.\n\nErrors:\nNOT_FOUND:\n- no element with the given elementInstanceKey exists\nINVALID_ARGUMENT:\n- the given variables document is not a valid JSON document; valid documents are expected to\nbe JSON documents where the root node is an object.\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<SetVariablesResponse> SetVariablesAsync(SetVariablesRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.SetVariablesRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.SetVariablesResponse}
      description: The call object.
    content.vb: Public Overridable Function SetVariablesAsync(request As SetVariablesRequest, options As grpc.CallOptions) As grpc.AsyncUnaryCall(Of SetVariablesResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.SetVariablesAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.Topology(GatewayProtocol.TopologyRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.Topology(GatewayProtocol.TopologyRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: Topology(GatewayProtocol.TopologyRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: Topology(TopologyRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.Topology(TopologyRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.Topology(GatewayProtocol.TopologyRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: Topology
    path: ''
    startLine: 8921
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nObtains the current topology of the cluster the gateway is part of.\n"
  example: []
  syntax:
    content: public virtual TopologyResponse Topology(TopologyRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.TopologyRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: GatewayProtocol.TopologyResponse
      description: The response received from the server.
    content.vb: Public Overridable Function Topology(request As TopologyRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As TopologyResponse
  overload: GatewayProtocol.Gateway.GatewayClient.Topology*
  nameWithType.vb: Gateway.GatewayClient.Topology(TopologyRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.Topology(GatewayProtocol.TopologyRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: Topology(TopologyRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.Topology(GatewayProtocol.TopologyRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.Topology(GatewayProtocol.TopologyRequest,grpc.CallOptions)
  id: Topology(GatewayProtocol.TopologyRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: Topology(TopologyRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.Topology(TopologyRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.Topology(GatewayProtocol.TopologyRequest, grpc.CallOptions)
  type: Method
  source:
    id: Topology
    path: ''
    startLine: 8932
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nObtains the current topology of the cluster the gateway is part of.\n"
  example: []
  syntax:
    content: public virtual TopologyResponse Topology(TopologyRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.TopologyRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: GatewayProtocol.TopologyResponse
      description: The response received from the server.
    content.vb: Public Overridable Function Topology(request As TopologyRequest, options As grpc.CallOptions) As TopologyResponse
  overload: GatewayProtocol.Gateway.GatewayClient.Topology*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.TopologyAsync(GatewayProtocol.TopologyRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.TopologyAsync(GatewayProtocol.TopologyRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: TopologyAsync(GatewayProtocol.TopologyRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: TopologyAsync(TopologyRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.TopologyAsync(TopologyRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.TopologyAsync(GatewayProtocol.TopologyRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: TopologyAsync
    path: ''
    startLine: 8945
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nObtains the current topology of the cluster the gateway is part of.\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<TopologyResponse> TopologyAsync(TopologyRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.TopologyRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.TopologyResponse}
      description: The call object.
    content.vb: Public Overridable Function TopologyAsync(request As TopologyRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As grpc.AsyncUnaryCall(Of TopologyResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.TopologyAsync*
  nameWithType.vb: Gateway.GatewayClient.TopologyAsync(TopologyRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.TopologyAsync(GatewayProtocol.TopologyRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: TopologyAsync(TopologyRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.TopologyAsync(GatewayProtocol.TopologyRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.TopologyAsync(GatewayProtocol.TopologyRequest,grpc.CallOptions)
  id: TopologyAsync(GatewayProtocol.TopologyRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: TopologyAsync(TopologyRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.TopologyAsync(TopologyRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.TopologyAsync(GatewayProtocol.TopologyRequest, grpc.CallOptions)
  type: Method
  source:
    id: TopologyAsync
    path: ''
    startLine: 8956
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nObtains the current topology of the cluster the gateway is part of.\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<TopologyResponse> TopologyAsync(TopologyRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.TopologyRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.TopologyResponse}
      description: The call object.
    content.vb: Public Overridable Function TopologyAsync(request As TopologyRequest, options As grpc.CallOptions) As grpc.AsyncUnaryCall(Of TopologyResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.TopologyAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetries(GatewayProtocol.UpdateJobRetriesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.UpdateJobRetries(GatewayProtocol.UpdateJobRetriesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: UpdateJobRetries(GatewayProtocol.UpdateJobRetriesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: UpdateJobRetries(UpdateJobRetriesRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.UpdateJobRetries(UpdateJobRetriesRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetries(GatewayProtocol.UpdateJobRetriesRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: UpdateJobRetries
    path: ''
    startLine: 8977
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nUpdates the number of retries a job has left. This is mostly useful for jobs that have run out of\nretries, should the underlying problem be solved.\n\nErrors:\nNOT_FOUND:\n- no job exists with the given key\n\nINVALID_ARGUMENT:\n- retries is not greater than 0\n"
  example: []
  syntax:
    content: public virtual UpdateJobRetriesResponse UpdateJobRetries(UpdateJobRetriesRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.UpdateJobRetriesRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: GatewayProtocol.UpdateJobRetriesResponse
      description: The response received from the server.
    content.vb: Public Overridable Function UpdateJobRetries(request As UpdateJobRetriesRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As UpdateJobRetriesResponse
  overload: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetries*
  nameWithType.vb: Gateway.GatewayClient.UpdateJobRetries(UpdateJobRetriesRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetries(GatewayProtocol.UpdateJobRetriesRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: UpdateJobRetries(UpdateJobRetriesRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetries(GatewayProtocol.UpdateJobRetriesRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.UpdateJobRetries(GatewayProtocol.UpdateJobRetriesRequest,grpc.CallOptions)
  id: UpdateJobRetries(GatewayProtocol.UpdateJobRetriesRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: UpdateJobRetries(UpdateJobRetriesRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.UpdateJobRetries(UpdateJobRetriesRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetries(GatewayProtocol.UpdateJobRetriesRequest, grpc.CallOptions)
  type: Method
  source:
    id: UpdateJobRetries
    path: ''
    startLine: 8996
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nUpdates the number of retries a job has left. This is mostly useful for jobs that have run out of\nretries, should the underlying problem be solved.\n\nErrors:\nNOT_FOUND:\n- no job exists with the given key\n\nINVALID_ARGUMENT:\n- retries is not greater than 0\n"
  example: []
  syntax:
    content: public virtual UpdateJobRetriesResponse UpdateJobRetries(UpdateJobRetriesRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.UpdateJobRetriesRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: GatewayProtocol.UpdateJobRetriesResponse
      description: The response received from the server.
    content.vb: Public Overridable Function UpdateJobRetries(request As UpdateJobRetriesRequest, options As grpc.CallOptions) As UpdateJobRetriesResponse
  overload: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetries*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetriesAsync(GatewayProtocol.UpdateJobRetriesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.UpdateJobRetriesAsync(GatewayProtocol.UpdateJobRetriesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  id: UpdateJobRetriesAsync(GatewayProtocol.UpdateJobRetriesRequest,grpc.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: UpdateJobRetriesAsync(UpdateJobRetriesRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  nameWithType: Gateway.GatewayClient.UpdateJobRetriesAsync(UpdateJobRetriesRequest, grpc.Metadata, Nullable<DateTime>, CancellationToken)
  fullName: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetriesAsync(GatewayProtocol.UpdateJobRetriesRequest, grpc.Metadata, System.Nullable<System.DateTime>, System.Threading.CancellationToken)
  type: Method
  source:
    id: UpdateJobRetriesAsync
    path: ''
    startLine: 9017
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nUpdates the number of retries a job has left. This is mostly useful for jobs that have run out of\nretries, should the underlying problem be solved.\n\nErrors:\nNOT_FOUND:\n- no job exists with the given key\n\nINVALID_ARGUMENT:\n- retries is not greater than 0\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<UpdateJobRetriesResponse> UpdateJobRetriesAsync(UpdateJobRetriesRequest request, grpc.Metadata headers = null, DateTime? deadline = default(DateTime? ), CancellationToken cancellationToken = default(CancellationToken))
    parameters:
    - id: request
      type: GatewayProtocol.UpdateJobRetriesRequest
      description: The request to send to the server.
    - id: headers
      type: grpc.Metadata
      description: The initial metadata to send with the call. This parameter is optional.
    - id: deadline
      type: System.Nullable{System.DateTime}
      description: An optional deadline for the call. The call will be cancelled if deadline is hit.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: An optional token for canceling the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.UpdateJobRetriesResponse}
      description: The call object.
    content.vb: Public Overridable Function UpdateJobRetriesAsync(request As UpdateJobRetriesRequest, headers As grpc.Metadata = Nothing, deadline As Date? = Nothing, cancellationToken As CancellationToken = Nothing) As grpc.AsyncUnaryCall(Of UpdateJobRetriesResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetriesAsync*
  nameWithType.vb: Gateway.GatewayClient.UpdateJobRetriesAsync(UpdateJobRetriesRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetriesAsync(GatewayProtocol.UpdateJobRetriesRequest, grpc.Metadata, System.Nullable(Of System.DateTime), System.Threading.CancellationToken)
  name.vb: UpdateJobRetriesAsync(UpdateJobRetriesRequest, grpc.Metadata, Nullable(Of DateTime), CancellationToken)
- uid: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetriesAsync(GatewayProtocol.UpdateJobRetriesRequest,grpc.CallOptions)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.UpdateJobRetriesAsync(GatewayProtocol.UpdateJobRetriesRequest,grpc.CallOptions)
  id: UpdateJobRetriesAsync(GatewayProtocol.UpdateJobRetriesRequest,grpc.CallOptions)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: UpdateJobRetriesAsync(UpdateJobRetriesRequest, grpc.CallOptions)
  nameWithType: Gateway.GatewayClient.UpdateJobRetriesAsync(UpdateJobRetriesRequest, grpc.CallOptions)
  fullName: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetriesAsync(GatewayProtocol.UpdateJobRetriesRequest, grpc.CallOptions)
  type: Method
  source:
    id: UpdateJobRetriesAsync
    path: ''
    startLine: 9036
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: "\n\nUpdates the number of retries a job has left. This is mostly useful for jobs that have run out of\nretries, should the underlying problem be solved.\n\nErrors:\nNOT_FOUND:\n- no job exists with the given key\n\nINVALID_ARGUMENT:\n- retries is not greater than 0\n"
  example: []
  syntax:
    content: public virtual grpc.AsyncUnaryCall<UpdateJobRetriesResponse> UpdateJobRetriesAsync(UpdateJobRetriesRequest request, grpc.CallOptions options)
    parameters:
    - id: request
      type: GatewayProtocol.UpdateJobRetriesRequest
      description: The request to send to the server.
    - id: options
      type: grpc.CallOptions
      description: The options for the call.
    return:
      type: grpc.AsyncUnaryCall{GatewayProtocol.UpdateJobRetriesResponse}
      description: The call object.
    content.vb: Public Overridable Function UpdateJobRetriesAsync(request As UpdateJobRetriesRequest, options As grpc.CallOptions) As grpc.AsyncUnaryCall(Of UpdateJobRetriesResponse)
  overload: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetriesAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: GatewayProtocol.Gateway.GatewayClient.NewInstance(ClientBaseConfiguration)
  commentId: M:GatewayProtocol.Gateway.GatewayClient.NewInstance(ClientBaseConfiguration)
  id: NewInstance(ClientBaseConfiguration)
  parent: GatewayProtocol.Gateway.GatewayClient
  langs:
  - csharp
  - vb
  name: NewInstance(ClientBaseConfiguration)
  nameWithType: Gateway.GatewayClient.NewInstance(ClientBaseConfiguration)
  fullName: GatewayProtocol.Gateway.GatewayClient.NewInstance(ClientBaseConfiguration)
  type: Method
  source:
    id: NewInstance
    path: ''
    startLine: 9041
  assemblies:
  - cs.temp.dll
  namespace: GatewayProtocol
  summary: Creates a new instance of client from given <code>ClientBaseConfiguration</code>.
  example: []
  syntax:
    content: protected override Gateway.GatewayClient NewInstance(ClientBaseConfiguration configuration)
    parameters:
    - id: configuration
      type: ClientBaseConfiguration
    return:
      type: GatewayProtocol.Gateway.GatewayClient
    content.vb: Protected Overrides Function NewInstance(configuration As ClientBaseConfiguration) As Gateway.GatewayClient
  overload: GatewayProtocol.Gateway.GatewayClient.NewInstance*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: GatewayProtocol
  commentId: N:GatewayProtocol
  name: GatewayProtocol
  nameWithType: GatewayProtocol
  fullName: GatewayProtocol
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GatewayProtocol.Gateway.GatewayClient.#ctor*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.#ctor
  name: GatewayClient
  nameWithType: Gateway.GatewayClient.GatewayClient
  fullName: GatewayProtocol.Gateway.GatewayClient.GatewayClient
- uid: grpc.ChannelBase
  commentId: '!:grpc.ChannelBase'
  isExternal: true
  name: grpc.ChannelBase
  nameWithType: grpc.ChannelBase
  fullName: grpc.ChannelBase
- uid: grpc.CallInvoker
  commentId: '!:grpc.CallInvoker'
  isExternal: true
  name: grpc.CallInvoker
  nameWithType: grpc.CallInvoker
  fullName: grpc.CallInvoker
- uid: ClientBaseConfiguration
  isExternal: true
  name: ClientBaseConfiguration
  nameWithType: ClientBaseConfiguration
  fullName: ClientBaseConfiguration
- uid: GatewayProtocol.Gateway.GatewayClient.ActivateJobs*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.ActivateJobs
  name: ActivateJobs
  nameWithType: Gateway.GatewayClient.ActivateJobs
  fullName: GatewayProtocol.Gateway.GatewayClient.ActivateJobs
- uid: GatewayProtocol.ActivateJobsRequest
  commentId: T:GatewayProtocol.ActivateJobsRequest
  parent: GatewayProtocol
  name: ActivateJobsRequest
  nameWithType: ActivateJobsRequest
  fullName: GatewayProtocol.ActivateJobsRequest
- uid: grpc.Metadata
  isExternal: true
  name: grpc.Metadata
  nameWithType: grpc.Metadata
  fullName: grpc.Metadata
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: grpc.AsyncServerStreamingCall{GatewayProtocol.ActivateJobsResponse}
  commentId: '!:grpc.AsyncServerStreamingCall{GatewayProtocol.ActivateJobsResponse}'
  definition: grpc.AsyncServerStreamingCall`1
  name: grpc.AsyncServerStreamingCall<ActivateJobsResponse>
  nameWithType: grpc.AsyncServerStreamingCall<ActivateJobsResponse>
  fullName: grpc.AsyncServerStreamingCall<GatewayProtocol.ActivateJobsResponse>
  nameWithType.vb: grpc.AsyncServerStreamingCall(Of ActivateJobsResponse)
  fullName.vb: grpc.AsyncServerStreamingCall(Of GatewayProtocol.ActivateJobsResponse)
  name.vb: grpc.AsyncServerStreamingCall(Of ActivateJobsResponse)
  spec.csharp:
  - uid: grpc.AsyncServerStreamingCall`1
    name: grpc.AsyncServerStreamingCall
    nameWithType: grpc.AsyncServerStreamingCall
    fullName: grpc.AsyncServerStreamingCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GatewayProtocol.ActivateJobsResponse
    name: ActivateJobsResponse
    nameWithType: ActivateJobsResponse
    fullName: GatewayProtocol.ActivateJobsResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: grpc.AsyncServerStreamingCall`1
    name: grpc.AsyncServerStreamingCall
    nameWithType: grpc.AsyncServerStreamingCall
    fullName: grpc.AsyncServerStreamingCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GatewayProtocol.ActivateJobsResponse
    name: ActivateJobsResponse
    nameWithType: ActivateJobsResponse
    fullName: GatewayProtocol.ActivateJobsResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: grpc.AsyncServerStreamingCall`1
  isExternal: true
  name: grpc.AsyncServerStreamingCall<>
  nameWithType: grpc.AsyncServerStreamingCall<>
  fullName: grpc.AsyncServerStreamingCall<>
  nameWithType.vb: grpc.AsyncServerStreamingCall(Of )
  fullName.vb: grpc.AsyncServerStreamingCall(Of )
  name.vb: grpc.AsyncServerStreamingCall(Of )
  spec.csharp:
  - uid: grpc.AsyncServerStreamingCall`1
    name: grpc.AsyncServerStreamingCall
    nameWithType: grpc.AsyncServerStreamingCall
    fullName: grpc.AsyncServerStreamingCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: grpc.AsyncServerStreamingCall`1
    name: grpc.AsyncServerStreamingCall
    nameWithType: grpc.AsyncServerStreamingCall
    fullName: grpc.AsyncServerStreamingCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: grpc.CallOptions
  isExternal: true
  name: grpc.CallOptions
  nameWithType: grpc.CallOptions
  fullName: grpc.CallOptions
- uid: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstance*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstance
  name: CancelWorkflowInstance
  nameWithType: Gateway.GatewayClient.CancelWorkflowInstance
  fullName: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstance
- uid: GatewayProtocol.CancelWorkflowInstanceRequest
  commentId: T:GatewayProtocol.CancelWorkflowInstanceRequest
  parent: GatewayProtocol
  name: CancelWorkflowInstanceRequest
  nameWithType: CancelWorkflowInstanceRequest
  fullName: GatewayProtocol.CancelWorkflowInstanceRequest
- uid: GatewayProtocol.CancelWorkflowInstanceResponse
  commentId: T:GatewayProtocol.CancelWorkflowInstanceResponse
  parent: GatewayProtocol
  name: CancelWorkflowInstanceResponse
  nameWithType: CancelWorkflowInstanceResponse
  fullName: GatewayProtocol.CancelWorkflowInstanceResponse
- uid: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstanceAsync*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstanceAsync
  name: CancelWorkflowInstanceAsync
  nameWithType: Gateway.GatewayClient.CancelWorkflowInstanceAsync
  fullName: GatewayProtocol.Gateway.GatewayClient.CancelWorkflowInstanceAsync
- uid: grpc.AsyncUnaryCall{GatewayProtocol.CancelWorkflowInstanceResponse}
  commentId: '!:grpc.AsyncUnaryCall{GatewayProtocol.CancelWorkflowInstanceResponse}'
  definition: grpc.AsyncUnaryCall`1
  name: grpc.AsyncUnaryCall<CancelWorkflowInstanceResponse>
  nameWithType: grpc.AsyncUnaryCall<CancelWorkflowInstanceResponse>
  fullName: grpc.AsyncUnaryCall<GatewayProtocol.CancelWorkflowInstanceResponse>
  nameWithType.vb: grpc.AsyncUnaryCall(Of CancelWorkflowInstanceResponse)
  fullName.vb: grpc.AsyncUnaryCall(Of GatewayProtocol.CancelWorkflowInstanceResponse)
  name.vb: grpc.AsyncUnaryCall(Of CancelWorkflowInstanceResponse)
  spec.csharp:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GatewayProtocol.CancelWorkflowInstanceResponse
    name: CancelWorkflowInstanceResponse
    nameWithType: CancelWorkflowInstanceResponse
    fullName: GatewayProtocol.CancelWorkflowInstanceResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GatewayProtocol.CancelWorkflowInstanceResponse
    name: CancelWorkflowInstanceResponse
    nameWithType: CancelWorkflowInstanceResponse
    fullName: GatewayProtocol.CancelWorkflowInstanceResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: grpc.AsyncUnaryCall`1
  isExternal: true
  name: grpc.AsyncUnaryCall<>
  nameWithType: grpc.AsyncUnaryCall<>
  fullName: grpc.AsyncUnaryCall<>
  nameWithType.vb: grpc.AsyncUnaryCall(Of )
  fullName.vb: grpc.AsyncUnaryCall(Of )
  name.vb: grpc.AsyncUnaryCall(Of )
  spec.csharp:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: GatewayProtocol.Gateway.GatewayClient.CompleteJob*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.CompleteJob
  name: CompleteJob
  nameWithType: Gateway.GatewayClient.CompleteJob
  fullName: GatewayProtocol.Gateway.GatewayClient.CompleteJob
- uid: GatewayProtocol.CompleteJobRequest
  commentId: T:GatewayProtocol.CompleteJobRequest
  parent: GatewayProtocol
  name: CompleteJobRequest
  nameWithType: CompleteJobRequest
  fullName: GatewayProtocol.CompleteJobRequest
- uid: GatewayProtocol.CompleteJobResponse
  commentId: T:GatewayProtocol.CompleteJobResponse
  parent: GatewayProtocol
  name: CompleteJobResponse
  nameWithType: CompleteJobResponse
  fullName: GatewayProtocol.CompleteJobResponse
- uid: GatewayProtocol.Gateway.GatewayClient.CompleteJobAsync*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.CompleteJobAsync
  name: CompleteJobAsync
  nameWithType: Gateway.GatewayClient.CompleteJobAsync
  fullName: GatewayProtocol.Gateway.GatewayClient.CompleteJobAsync
- uid: grpc.AsyncUnaryCall{GatewayProtocol.CompleteJobResponse}
  commentId: '!:grpc.AsyncUnaryCall{GatewayProtocol.CompleteJobResponse}'
  definition: grpc.AsyncUnaryCall`1
  name: grpc.AsyncUnaryCall<CompleteJobResponse>
  nameWithType: grpc.AsyncUnaryCall<CompleteJobResponse>
  fullName: grpc.AsyncUnaryCall<GatewayProtocol.CompleteJobResponse>
  nameWithType.vb: grpc.AsyncUnaryCall(Of CompleteJobResponse)
  fullName.vb: grpc.AsyncUnaryCall(Of GatewayProtocol.CompleteJobResponse)
  name.vb: grpc.AsyncUnaryCall(Of CompleteJobResponse)
  spec.csharp:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GatewayProtocol.CompleteJobResponse
    name: CompleteJobResponse
    nameWithType: CompleteJobResponse
    fullName: GatewayProtocol.CompleteJobResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GatewayProtocol.CompleteJobResponse
    name: CompleteJobResponse
    nameWithType: CompleteJobResponse
    fullName: GatewayProtocol.CompleteJobResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstance*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstance
  name: CreateWorkflowInstance
  nameWithType: Gateway.GatewayClient.CreateWorkflowInstance
  fullName: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstance
- uid: GatewayProtocol.CreateWorkflowInstanceRequest
  commentId: T:GatewayProtocol.CreateWorkflowInstanceRequest
  parent: GatewayProtocol
  name: CreateWorkflowInstanceRequest
  nameWithType: CreateWorkflowInstanceRequest
  fullName: GatewayProtocol.CreateWorkflowInstanceRequest
- uid: GatewayProtocol.CreateWorkflowInstanceResponse
  commentId: T:GatewayProtocol.CreateWorkflowInstanceResponse
  parent: GatewayProtocol
  name: CreateWorkflowInstanceResponse
  nameWithType: CreateWorkflowInstanceResponse
  fullName: GatewayProtocol.CreateWorkflowInstanceResponse
- uid: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceAsync*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceAsync
  name: CreateWorkflowInstanceAsync
  nameWithType: Gateway.GatewayClient.CreateWorkflowInstanceAsync
  fullName: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceAsync
- uid: grpc.AsyncUnaryCall{GatewayProtocol.CreateWorkflowInstanceResponse}
  commentId: '!:grpc.AsyncUnaryCall{GatewayProtocol.CreateWorkflowInstanceResponse}'
  definition: grpc.AsyncUnaryCall`1
  name: grpc.AsyncUnaryCall<CreateWorkflowInstanceResponse>
  nameWithType: grpc.AsyncUnaryCall<CreateWorkflowInstanceResponse>
  fullName: grpc.AsyncUnaryCall<GatewayProtocol.CreateWorkflowInstanceResponse>
  nameWithType.vb: grpc.AsyncUnaryCall(Of CreateWorkflowInstanceResponse)
  fullName.vb: grpc.AsyncUnaryCall(Of GatewayProtocol.CreateWorkflowInstanceResponse)
  name.vb: grpc.AsyncUnaryCall(Of CreateWorkflowInstanceResponse)
  spec.csharp:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GatewayProtocol.CreateWorkflowInstanceResponse
    name: CreateWorkflowInstanceResponse
    nameWithType: CreateWorkflowInstanceResponse
    fullName: GatewayProtocol.CreateWorkflowInstanceResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GatewayProtocol.CreateWorkflowInstanceResponse
    name: CreateWorkflowInstanceResponse
    nameWithType: CreateWorkflowInstanceResponse
    fullName: GatewayProtocol.CreateWorkflowInstanceResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResult*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResult
  name: CreateWorkflowInstanceWithResult
  nameWithType: Gateway.GatewayClient.CreateWorkflowInstanceWithResult
  fullName: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResult
- uid: GatewayProtocol.CreateWorkflowInstanceWithResultRequest
  commentId: T:GatewayProtocol.CreateWorkflowInstanceWithResultRequest
  parent: GatewayProtocol
  name: CreateWorkflowInstanceWithResultRequest
  nameWithType: CreateWorkflowInstanceWithResultRequest
  fullName: GatewayProtocol.CreateWorkflowInstanceWithResultRequest
- uid: GatewayProtocol.CreateWorkflowInstanceWithResultResponse
  commentId: T:GatewayProtocol.CreateWorkflowInstanceWithResultResponse
  parent: GatewayProtocol
  name: CreateWorkflowInstanceWithResultResponse
  nameWithType: CreateWorkflowInstanceWithResultResponse
  fullName: GatewayProtocol.CreateWorkflowInstanceWithResultResponse
- uid: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync
  name: CreateWorkflowInstanceWithResultAsync
  nameWithType: Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync
  fullName: GatewayProtocol.Gateway.GatewayClient.CreateWorkflowInstanceWithResultAsync
- uid: grpc.AsyncUnaryCall{GatewayProtocol.CreateWorkflowInstanceWithResultResponse}
  commentId: '!:grpc.AsyncUnaryCall{GatewayProtocol.CreateWorkflowInstanceWithResultResponse}'
  definition: grpc.AsyncUnaryCall`1
  name: grpc.AsyncUnaryCall<CreateWorkflowInstanceWithResultResponse>
  nameWithType: grpc.AsyncUnaryCall<CreateWorkflowInstanceWithResultResponse>
  fullName: grpc.AsyncUnaryCall<GatewayProtocol.CreateWorkflowInstanceWithResultResponse>
  nameWithType.vb: grpc.AsyncUnaryCall(Of CreateWorkflowInstanceWithResultResponse)
  fullName.vb: grpc.AsyncUnaryCall(Of GatewayProtocol.CreateWorkflowInstanceWithResultResponse)
  name.vb: grpc.AsyncUnaryCall(Of CreateWorkflowInstanceWithResultResponse)
  spec.csharp:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GatewayProtocol.CreateWorkflowInstanceWithResultResponse
    name: CreateWorkflowInstanceWithResultResponse
    nameWithType: CreateWorkflowInstanceWithResultResponse
    fullName: GatewayProtocol.CreateWorkflowInstanceWithResultResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GatewayProtocol.CreateWorkflowInstanceWithResultResponse
    name: CreateWorkflowInstanceWithResultResponse
    nameWithType: CreateWorkflowInstanceWithResultResponse
    fullName: GatewayProtocol.CreateWorkflowInstanceWithResultResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: GatewayProtocol.Gateway.GatewayClient.DeployWorkflow*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.DeployWorkflow
  name: DeployWorkflow
  nameWithType: Gateway.GatewayClient.DeployWorkflow
  fullName: GatewayProtocol.Gateway.GatewayClient.DeployWorkflow
- uid: GatewayProtocol.DeployWorkflowRequest
  commentId: T:GatewayProtocol.DeployWorkflowRequest
  parent: GatewayProtocol
  name: DeployWorkflowRequest
  nameWithType: DeployWorkflowRequest
  fullName: GatewayProtocol.DeployWorkflowRequest
- uid: GatewayProtocol.DeployWorkflowResponse
  commentId: T:GatewayProtocol.DeployWorkflowResponse
  parent: GatewayProtocol
  name: DeployWorkflowResponse
  nameWithType: DeployWorkflowResponse
  fullName: GatewayProtocol.DeployWorkflowResponse
- uid: GatewayProtocol.Gateway.GatewayClient.DeployWorkflowAsync*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.DeployWorkflowAsync
  name: DeployWorkflowAsync
  nameWithType: Gateway.GatewayClient.DeployWorkflowAsync
  fullName: GatewayProtocol.Gateway.GatewayClient.DeployWorkflowAsync
- uid: grpc.AsyncUnaryCall{GatewayProtocol.DeployWorkflowResponse}
  commentId: '!:grpc.AsyncUnaryCall{GatewayProtocol.DeployWorkflowResponse}'
  definition: grpc.AsyncUnaryCall`1
  name: grpc.AsyncUnaryCall<DeployWorkflowResponse>
  nameWithType: grpc.AsyncUnaryCall<DeployWorkflowResponse>
  fullName: grpc.AsyncUnaryCall<GatewayProtocol.DeployWorkflowResponse>
  nameWithType.vb: grpc.AsyncUnaryCall(Of DeployWorkflowResponse)
  fullName.vb: grpc.AsyncUnaryCall(Of GatewayProtocol.DeployWorkflowResponse)
  name.vb: grpc.AsyncUnaryCall(Of DeployWorkflowResponse)
  spec.csharp:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GatewayProtocol.DeployWorkflowResponse
    name: DeployWorkflowResponse
    nameWithType: DeployWorkflowResponse
    fullName: GatewayProtocol.DeployWorkflowResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GatewayProtocol.DeployWorkflowResponse
    name: DeployWorkflowResponse
    nameWithType: DeployWorkflowResponse
    fullName: GatewayProtocol.DeployWorkflowResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: GatewayProtocol.Gateway.GatewayClient.FailJob*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.FailJob
  name: FailJob
  nameWithType: Gateway.GatewayClient.FailJob
  fullName: GatewayProtocol.Gateway.GatewayClient.FailJob
- uid: GatewayProtocol.FailJobRequest
  commentId: T:GatewayProtocol.FailJobRequest
  parent: GatewayProtocol
  name: FailJobRequest
  nameWithType: FailJobRequest
  fullName: GatewayProtocol.FailJobRequest
- uid: GatewayProtocol.FailJobResponse
  commentId: T:GatewayProtocol.FailJobResponse
  parent: GatewayProtocol
  name: FailJobResponse
  nameWithType: FailJobResponse
  fullName: GatewayProtocol.FailJobResponse
- uid: GatewayProtocol.Gateway.GatewayClient.FailJobAsync*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.FailJobAsync
  name: FailJobAsync
  nameWithType: Gateway.GatewayClient.FailJobAsync
  fullName: GatewayProtocol.Gateway.GatewayClient.FailJobAsync
- uid: grpc.AsyncUnaryCall{GatewayProtocol.FailJobResponse}
  commentId: '!:grpc.AsyncUnaryCall{GatewayProtocol.FailJobResponse}'
  definition: grpc.AsyncUnaryCall`1
  name: grpc.AsyncUnaryCall<FailJobResponse>
  nameWithType: grpc.AsyncUnaryCall<FailJobResponse>
  fullName: grpc.AsyncUnaryCall<GatewayProtocol.FailJobResponse>
  nameWithType.vb: grpc.AsyncUnaryCall(Of FailJobResponse)
  fullName.vb: grpc.AsyncUnaryCall(Of GatewayProtocol.FailJobResponse)
  name.vb: grpc.AsyncUnaryCall(Of FailJobResponse)
  spec.csharp:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GatewayProtocol.FailJobResponse
    name: FailJobResponse
    nameWithType: FailJobResponse
    fullName: GatewayProtocol.FailJobResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GatewayProtocol.FailJobResponse
    name: FailJobResponse
    nameWithType: FailJobResponse
    fullName: GatewayProtocol.FailJobResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: GatewayProtocol.Gateway.GatewayClient.PublishMessage*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.PublishMessage
  name: PublishMessage
  nameWithType: Gateway.GatewayClient.PublishMessage
  fullName: GatewayProtocol.Gateway.GatewayClient.PublishMessage
- uid: GatewayProtocol.PublishMessageRequest
  commentId: T:GatewayProtocol.PublishMessageRequest
  parent: GatewayProtocol
  name: PublishMessageRequest
  nameWithType: PublishMessageRequest
  fullName: GatewayProtocol.PublishMessageRequest
- uid: GatewayProtocol.PublishMessageResponse
  commentId: T:GatewayProtocol.PublishMessageResponse
  parent: GatewayProtocol
  name: PublishMessageResponse
  nameWithType: PublishMessageResponse
  fullName: GatewayProtocol.PublishMessageResponse
- uid: GatewayProtocol.Gateway.GatewayClient.PublishMessageAsync*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.PublishMessageAsync
  name: PublishMessageAsync
  nameWithType: Gateway.GatewayClient.PublishMessageAsync
  fullName: GatewayProtocol.Gateway.GatewayClient.PublishMessageAsync
- uid: grpc.AsyncUnaryCall{GatewayProtocol.PublishMessageResponse}
  commentId: '!:grpc.AsyncUnaryCall{GatewayProtocol.PublishMessageResponse}'
  definition: grpc.AsyncUnaryCall`1
  name: grpc.AsyncUnaryCall<PublishMessageResponse>
  nameWithType: grpc.AsyncUnaryCall<PublishMessageResponse>
  fullName: grpc.AsyncUnaryCall<GatewayProtocol.PublishMessageResponse>
  nameWithType.vb: grpc.AsyncUnaryCall(Of PublishMessageResponse)
  fullName.vb: grpc.AsyncUnaryCall(Of GatewayProtocol.PublishMessageResponse)
  name.vb: grpc.AsyncUnaryCall(Of PublishMessageResponse)
  spec.csharp:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GatewayProtocol.PublishMessageResponse
    name: PublishMessageResponse
    nameWithType: PublishMessageResponse
    fullName: GatewayProtocol.PublishMessageResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GatewayProtocol.PublishMessageResponse
    name: PublishMessageResponse
    nameWithType: PublishMessageResponse
    fullName: GatewayProtocol.PublishMessageResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: GatewayProtocol.Gateway.GatewayClient.ResolveIncident*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.ResolveIncident
  name: ResolveIncident
  nameWithType: Gateway.GatewayClient.ResolveIncident
  fullName: GatewayProtocol.Gateway.GatewayClient.ResolveIncident
- uid: GatewayProtocol.ResolveIncidentRequest
  commentId: T:GatewayProtocol.ResolveIncidentRequest
  parent: GatewayProtocol
  name: ResolveIncidentRequest
  nameWithType: ResolveIncidentRequest
  fullName: GatewayProtocol.ResolveIncidentRequest
- uid: GatewayProtocol.ResolveIncidentResponse
  commentId: T:GatewayProtocol.ResolveIncidentResponse
  parent: GatewayProtocol
  name: ResolveIncidentResponse
  nameWithType: ResolveIncidentResponse
  fullName: GatewayProtocol.ResolveIncidentResponse
- uid: GatewayProtocol.Gateway.GatewayClient.ResolveIncidentAsync*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.ResolveIncidentAsync
  name: ResolveIncidentAsync
  nameWithType: Gateway.GatewayClient.ResolveIncidentAsync
  fullName: GatewayProtocol.Gateway.GatewayClient.ResolveIncidentAsync
- uid: grpc.AsyncUnaryCall{GatewayProtocol.ResolveIncidentResponse}
  commentId: '!:grpc.AsyncUnaryCall{GatewayProtocol.ResolveIncidentResponse}'
  definition: grpc.AsyncUnaryCall`1
  name: grpc.AsyncUnaryCall<ResolveIncidentResponse>
  nameWithType: grpc.AsyncUnaryCall<ResolveIncidentResponse>
  fullName: grpc.AsyncUnaryCall<GatewayProtocol.ResolveIncidentResponse>
  nameWithType.vb: grpc.AsyncUnaryCall(Of ResolveIncidentResponse)
  fullName.vb: grpc.AsyncUnaryCall(Of GatewayProtocol.ResolveIncidentResponse)
  name.vb: grpc.AsyncUnaryCall(Of ResolveIncidentResponse)
  spec.csharp:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GatewayProtocol.ResolveIncidentResponse
    name: ResolveIncidentResponse
    nameWithType: ResolveIncidentResponse
    fullName: GatewayProtocol.ResolveIncidentResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GatewayProtocol.ResolveIncidentResponse
    name: ResolveIncidentResponse
    nameWithType: ResolveIncidentResponse
    fullName: GatewayProtocol.ResolveIncidentResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: GatewayProtocol.Gateway.GatewayClient.SetVariables*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.SetVariables
  name: SetVariables
  nameWithType: Gateway.GatewayClient.SetVariables
  fullName: GatewayProtocol.Gateway.GatewayClient.SetVariables
- uid: GatewayProtocol.SetVariablesRequest
  commentId: T:GatewayProtocol.SetVariablesRequest
  parent: GatewayProtocol
  name: SetVariablesRequest
  nameWithType: SetVariablesRequest
  fullName: GatewayProtocol.SetVariablesRequest
- uid: GatewayProtocol.SetVariablesResponse
  commentId: T:GatewayProtocol.SetVariablesResponse
  parent: GatewayProtocol
  name: SetVariablesResponse
  nameWithType: SetVariablesResponse
  fullName: GatewayProtocol.SetVariablesResponse
- uid: GatewayProtocol.Gateway.GatewayClient.SetVariablesAsync*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.SetVariablesAsync
  name: SetVariablesAsync
  nameWithType: Gateway.GatewayClient.SetVariablesAsync
  fullName: GatewayProtocol.Gateway.GatewayClient.SetVariablesAsync
- uid: grpc.AsyncUnaryCall{GatewayProtocol.SetVariablesResponse}
  commentId: '!:grpc.AsyncUnaryCall{GatewayProtocol.SetVariablesResponse}'
  definition: grpc.AsyncUnaryCall`1
  name: grpc.AsyncUnaryCall<SetVariablesResponse>
  nameWithType: grpc.AsyncUnaryCall<SetVariablesResponse>
  fullName: grpc.AsyncUnaryCall<GatewayProtocol.SetVariablesResponse>
  nameWithType.vb: grpc.AsyncUnaryCall(Of SetVariablesResponse)
  fullName.vb: grpc.AsyncUnaryCall(Of GatewayProtocol.SetVariablesResponse)
  name.vb: grpc.AsyncUnaryCall(Of SetVariablesResponse)
  spec.csharp:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GatewayProtocol.SetVariablesResponse
    name: SetVariablesResponse
    nameWithType: SetVariablesResponse
    fullName: GatewayProtocol.SetVariablesResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GatewayProtocol.SetVariablesResponse
    name: SetVariablesResponse
    nameWithType: SetVariablesResponse
    fullName: GatewayProtocol.SetVariablesResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: GatewayProtocol.Gateway.GatewayClient.Topology*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.Topology
  name: Topology
  nameWithType: Gateway.GatewayClient.Topology
  fullName: GatewayProtocol.Gateway.GatewayClient.Topology
- uid: GatewayProtocol.TopologyRequest
  commentId: T:GatewayProtocol.TopologyRequest
  parent: GatewayProtocol
  name: TopologyRequest
  nameWithType: TopologyRequest
  fullName: GatewayProtocol.TopologyRequest
- uid: GatewayProtocol.TopologyResponse
  commentId: T:GatewayProtocol.TopologyResponse
  parent: GatewayProtocol
  name: TopologyResponse
  nameWithType: TopologyResponse
  fullName: GatewayProtocol.TopologyResponse
- uid: GatewayProtocol.Gateway.GatewayClient.TopologyAsync*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.TopologyAsync
  name: TopologyAsync
  nameWithType: Gateway.GatewayClient.TopologyAsync
  fullName: GatewayProtocol.Gateway.GatewayClient.TopologyAsync
- uid: grpc.AsyncUnaryCall{GatewayProtocol.TopologyResponse}
  commentId: '!:grpc.AsyncUnaryCall{GatewayProtocol.TopologyResponse}'
  definition: grpc.AsyncUnaryCall`1
  name: grpc.AsyncUnaryCall<TopologyResponse>
  nameWithType: grpc.AsyncUnaryCall<TopologyResponse>
  fullName: grpc.AsyncUnaryCall<GatewayProtocol.TopologyResponse>
  nameWithType.vb: grpc.AsyncUnaryCall(Of TopologyResponse)
  fullName.vb: grpc.AsyncUnaryCall(Of GatewayProtocol.TopologyResponse)
  name.vb: grpc.AsyncUnaryCall(Of TopologyResponse)
  spec.csharp:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GatewayProtocol.TopologyResponse
    name: TopologyResponse
    nameWithType: TopologyResponse
    fullName: GatewayProtocol.TopologyResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GatewayProtocol.TopologyResponse
    name: TopologyResponse
    nameWithType: TopologyResponse
    fullName: GatewayProtocol.TopologyResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetries*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.UpdateJobRetries
  name: UpdateJobRetries
  nameWithType: Gateway.GatewayClient.UpdateJobRetries
  fullName: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetries
- uid: GatewayProtocol.UpdateJobRetriesRequest
  commentId: T:GatewayProtocol.UpdateJobRetriesRequest
  parent: GatewayProtocol
  name: UpdateJobRetriesRequest
  nameWithType: UpdateJobRetriesRequest
  fullName: GatewayProtocol.UpdateJobRetriesRequest
- uid: GatewayProtocol.UpdateJobRetriesResponse
  commentId: T:GatewayProtocol.UpdateJobRetriesResponse
  parent: GatewayProtocol
  name: UpdateJobRetriesResponse
  nameWithType: UpdateJobRetriesResponse
  fullName: GatewayProtocol.UpdateJobRetriesResponse
- uid: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetriesAsync*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.UpdateJobRetriesAsync
  name: UpdateJobRetriesAsync
  nameWithType: Gateway.GatewayClient.UpdateJobRetriesAsync
  fullName: GatewayProtocol.Gateway.GatewayClient.UpdateJobRetriesAsync
- uid: grpc.AsyncUnaryCall{GatewayProtocol.UpdateJobRetriesResponse}
  commentId: '!:grpc.AsyncUnaryCall{GatewayProtocol.UpdateJobRetriesResponse}'
  definition: grpc.AsyncUnaryCall`1
  name: grpc.AsyncUnaryCall<UpdateJobRetriesResponse>
  nameWithType: grpc.AsyncUnaryCall<UpdateJobRetriesResponse>
  fullName: grpc.AsyncUnaryCall<GatewayProtocol.UpdateJobRetriesResponse>
  nameWithType.vb: grpc.AsyncUnaryCall(Of UpdateJobRetriesResponse)
  fullName.vb: grpc.AsyncUnaryCall(Of GatewayProtocol.UpdateJobRetriesResponse)
  name.vb: grpc.AsyncUnaryCall(Of UpdateJobRetriesResponse)
  spec.csharp:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GatewayProtocol.UpdateJobRetriesResponse
    name: UpdateJobRetriesResponse
    nameWithType: UpdateJobRetriesResponse
    fullName: GatewayProtocol.UpdateJobRetriesResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: grpc.AsyncUnaryCall`1
    name: grpc.AsyncUnaryCall
    nameWithType: grpc.AsyncUnaryCall
    fullName: grpc.AsyncUnaryCall
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GatewayProtocol.UpdateJobRetriesResponse
    name: UpdateJobRetriesResponse
    nameWithType: UpdateJobRetriesResponse
    fullName: GatewayProtocol.UpdateJobRetriesResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: GatewayProtocol.Gateway.GatewayClient.NewInstance*
  commentId: Overload:GatewayProtocol.Gateway.GatewayClient.NewInstance
  name: NewInstance
  nameWithType: Gateway.GatewayClient.NewInstance
  fullName: GatewayProtocol.Gateway.GatewayClient.NewInstance
- uid: GatewayProtocol.Gateway.GatewayClient
  commentId: T:GatewayProtocol.Gateway.GatewayClient
  parent: GatewayProtocol
  name: Gateway.GatewayClient
  nameWithType: Gateway.GatewayClient
  fullName: GatewayProtocol.Gateway.GatewayClient
